
F205VE_Modbus_RTU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002624  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080027a8  080027a8  000127a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800280c  0800280c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800280c  0800280c  0001280c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002814  08002814  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002814  08002814  00012814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002818  08002818  00012818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800281c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000074  08002890  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  08002890  000202d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e97  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000165e  00000000  00000000  00026f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  00028598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000660  00000000  00000000  00028c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c316  00000000  00000000  000292d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007748  00000000  00000000  000455e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab4c9  00000000  00000000  0004cd2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f81f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b2c  00000000  00000000  000f8248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000074 	.word	0x20000074
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08002790 	.word	0x08002790

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000078 	.word	0x20000078
 80001c0:	08002790 	.word	0x08002790

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b976 	b.w	80004c8 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9e08      	ldr	r6, [sp, #32]
 80001fa:	460d      	mov	r5, r1
 80001fc:	4604      	mov	r4, r0
 80001fe:	4688      	mov	r8, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14d      	bne.n	80002a0 <__udivmoddi4+0xac>
 8000204:	428a      	cmp	r2, r1
 8000206:	4694      	mov	ip, r2
 8000208:	d968      	bls.n	80002dc <__udivmoddi4+0xe8>
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	b152      	cbz	r2, 8000226 <__udivmoddi4+0x32>
 8000210:	fa01 f302 	lsl.w	r3, r1, r2
 8000214:	f1c2 0120 	rsb	r1, r2, #32
 8000218:	fa20 f101 	lsr.w	r1, r0, r1
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	ea41 0803 	orr.w	r8, r1, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800022a:	fbb8 f7f1 	udiv	r7, r8, r1
 800022e:	fa1f fe8c 	uxth.w	lr, ip
 8000232:	fb01 8817 	mls	r8, r1, r7, r8
 8000236:	fb07 f00e 	mul.w	r0, r7, lr
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	4298      	cmp	r0, r3
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x66>
 8000244:	eb1c 0303 	adds.w	r3, ip, r3
 8000248:	f107 35ff 	add.w	r5, r7, #4294967295
 800024c:	f080 811e 	bcs.w	800048c <__udivmoddi4+0x298>
 8000250:	4298      	cmp	r0, r3
 8000252:	f240 811b 	bls.w	800048c <__udivmoddi4+0x298>
 8000256:	3f02      	subs	r7, #2
 8000258:	4463      	add	r3, ip
 800025a:	1a1b      	subs	r3, r3, r0
 800025c:	fbb3 f0f1 	udiv	r0, r3, r1
 8000260:	fb01 3310 	mls	r3, r1, r0, r3
 8000264:	fb00 fe0e 	mul.w	lr, r0, lr
 8000268:	b2a4      	uxth	r4, r4
 800026a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026e:	45a6      	cmp	lr, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x94>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8109 	bcs.w	8000490 <__udivmoddi4+0x29c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8106 	bls.w	8000490 <__udivmoddi4+0x29c>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	2100      	movs	r1, #0
 800028a:	eba4 040e 	sub.w	r4, r4, lr
 800028e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa8>
 8000294:	2300      	movs	r3, #0
 8000296:	40d4      	lsrs	r4, r2
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d908      	bls.n	80002b6 <__udivmoddi4+0xc2>
 80002a4:	2e00      	cmp	r6, #0
 80002a6:	f000 80ee 	beq.w	8000486 <__udivmoddi4+0x292>
 80002aa:	2100      	movs	r1, #0
 80002ac:	e9c6 0500 	strd	r0, r5, [r6]
 80002b0:	4608      	mov	r0, r1
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d14a      	bne.n	8000354 <__udivmoddi4+0x160>
 80002be:	42ab      	cmp	r3, r5
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd4>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fc 	bhi.w	80004c0 <__udivmoddi4+0x2cc>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb65 0303 	sbc.w	r3, r5, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e2      	beq.n	800029c <__udivmoddi4+0xa8>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7df      	b.n	800029c <__udivmoddi4+0xa8>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xec>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 8091 	bne.w	800040c <__udivmoddi4+0x218>
 80002ea:	eba1 000c 	sub.w	r0, r1, ip
 80002ee:	2101      	movs	r1, #1
 80002f0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f4:	fa1f fe8c 	uxth.w	lr, ip
 80002f8:	fbb0 f3f7 	udiv	r3, r0, r7
 80002fc:	fb07 0013 	mls	r0, r7, r3, r0
 8000300:	0c25      	lsrs	r5, r4, #16
 8000302:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000306:	fb0e f003 	mul.w	r0, lr, r3
 800030a:	42a8      	cmp	r0, r5
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x12c>
 800030e:	eb1c 0505 	adds.w	r5, ip, r5
 8000312:	f103 38ff 	add.w	r8, r3, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x12a>
 8000318:	42a8      	cmp	r0, r5
 800031a:	f200 80ce 	bhi.w	80004ba <__udivmoddi4+0x2c6>
 800031e:	4643      	mov	r3, r8
 8000320:	1a2d      	subs	r5, r5, r0
 8000322:	fbb5 f0f7 	udiv	r0, r5, r7
 8000326:	fb07 5510 	mls	r5, r7, r0, r5
 800032a:	fb0e fe00 	mul.w	lr, lr, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x156>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x154>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80b6 	bhi.w	80004b4 <__udivmoddi4+0x2c0>
 8000348:	4628      	mov	r0, r5
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000352:	e79e      	b.n	8000292 <__udivmoddi4+0x9e>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa25 fa07 	lsr.w	sl, r5, r7
 8000366:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036a:	fbba f8f9 	udiv	r8, sl, r9
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	fb09 aa18 	mls	sl, r9, r8, sl
 8000376:	408d      	lsls	r5, r1
 8000378:	fa1f fe8c 	uxth.w	lr, ip
 800037c:	431d      	orrs	r5, r3
 800037e:	fa00 f301 	lsl.w	r3, r0, r1
 8000382:	fb08 f00e 	mul.w	r0, r8, lr
 8000386:	0c2c      	lsrs	r4, r5, #16
 8000388:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800038c:	42a0      	cmp	r0, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b8>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2bc>
 80003a0:	42a0      	cmp	r0, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2bc>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1a24      	subs	r4, r4, r0
 80003ae:	fbb4 f0f9 	udiv	r0, r4, r9
 80003b2:	fb09 4410 	mls	r4, r9, r0, r4
 80003b6:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1e2>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2b4>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2b4>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003da:	fba0 9502 	umull	r9, r5, r0, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x2a4>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x2a0>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2d0>
 80003f0:	ebb3 0208 	subs.w	r2, r3, r8
 80003f4:	eb64 040e 	sbc.w	r4, r4, lr
 80003f8:	fa22 f301 	lsr.w	r3, r2, r1
 80003fc:	fa04 f707 	lsl.w	r7, r4, r7
 8000400:	431f      	orrs	r7, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	2100      	movs	r1, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa8>
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	f1c2 0120 	rsb	r1, r2, #32
 8000414:	fa25 f301 	lsr.w	r3, r5, r1
 8000418:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041c:	fa20 f101 	lsr.w	r1, r0, r1
 8000420:	4095      	lsls	r5, r2
 8000422:	430d      	orrs	r5, r1
 8000424:	fbb3 f1f7 	udiv	r1, r3, r7
 8000428:	fb07 3311 	mls	r3, r7, r1, r3
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	0c28      	lsrs	r0, r5, #16
 8000432:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000436:	fb01 f30e 	mul.w	r3, r1, lr
 800043a:	4283      	cmp	r3, r0
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x260>
 8000442:	eb1c 0000 	adds.w	r0, ip, r0
 8000446:	f101 38ff 	add.w	r8, r1, #4294967295
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b8>
 800044c:	4283      	cmp	r3, r0
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b8>
 8000450:	3902      	subs	r1, #2
 8000452:	4460      	add	r0, ip
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	fbb0 f3f7 	udiv	r3, r0, r7
 800045a:	fb07 0013 	mls	r0, r7, r3, r0
 800045e:	b2ad      	uxth	r5, r5
 8000460:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000464:	fb03 f00e 	mul.w	r0, r3, lr
 8000468:	42a8      	cmp	r0, r5
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x28a>
 800046c:	eb1c 0505 	adds.w	r5, ip, r5
 8000470:	f103 38ff 	add.w	r8, r3, #4294967295
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2b0>
 8000476:	42a8      	cmp	r0, r5
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2b0>
 800047a:	3b02      	subs	r3, #2
 800047c:	4465      	add	r5, ip
 800047e:	1a28      	subs	r0, r5, r0
 8000480:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0x104>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e707      	b.n	800029c <__udivmoddi4+0xa8>
 800048c:	462f      	mov	r7, r5
 800048e:	e6e4      	b.n	800025a <__udivmoddi4+0x66>
 8000490:	4618      	mov	r0, r3
 8000492:	e6f9      	b.n	8000288 <__udivmoddi4+0x94>
 8000494:	454b      	cmp	r3, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f8>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f8>
 80004a4:	4643      	mov	r3, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x28a>
 80004a8:	4628      	mov	r0, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1e2>
 80004ac:	4641      	mov	r1, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x260>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b8>
 80004b4:	4464      	add	r4, ip
 80004b6:	3802      	subs	r0, #2
 80004b8:	e747      	b.n	800034a <__udivmoddi4+0x156>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	4465      	add	r5, ip
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x12c>
 80004c0:	4608      	mov	r0, r1
 80004c2:	e706      	b.n	80002d2 <__udivmoddi4+0xde>
 80004c4:	4631      	mov	r1, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa8>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fb88 	bl	8000be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f810 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f874 	bl	80005c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004dc:	f000 f848 	bl	8000570 <MX_USART2_UART_Init>
  void send_char(char data);



  /**************************/
  HAL_UARTEx_ReceiveToIdle_IT(&huart2, Data_Received, 256);
 80004e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004e4:	4902      	ldr	r1, [pc, #8]	; (80004f0 <main+0x24>)
 80004e6:	4803      	ldr	r0, [pc, #12]	; (80004f4 <main+0x28>)
 80004e8:	f001 fc53 	bl	8001d92 <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ec:	e7fe      	b.n	80004ec <main+0x20>
 80004ee:	bf00      	nop
 80004f0:	200000d4 	.word	0x200000d4
 80004f4:	20000090 	.word	0x20000090

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b092      	sub	sp, #72	; 0x48
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0318 	add.w	r3, r7, #24
 8000502:	2230      	movs	r2, #48	; 0x30
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f002 f93a 	bl	8002780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800051a:	2302      	movs	r3, #2
 800051c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800051e:	2301      	movs	r3, #1
 8000520:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000522:	2310      	movs	r3, #16
 8000524:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000526:	2300      	movs	r3, #0
 8000528:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800052a:	f107 0318 	add.w	r3, r7, #24
 800052e:	4618      	mov	r0, r3
 8000530:	f000 ff02 	bl	8001338 <HAL_RCC_OscConfig>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800053a:	f000 fa75 	bl	8000a28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800053e:	230f      	movs	r3, #15
 8000540:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000542:	2300      	movs	r3, #0
 8000544:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800054a:	2300      	movs	r3, #0
 800054c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800054e:	2300      	movs	r3, #0
 8000550:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f001 f93c 	bl	80017d4 <HAL_RCC_ClockConfig>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000562:	f000 fa61 	bl	8000a28 <Error_Handler>
  }
}
 8000566:	bf00      	nop
 8000568:	3748      	adds	r7, #72	; 0x48
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
	...

08000570 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000574:	4b11      	ldr	r3, [pc, #68]	; (80005bc <MX_USART2_UART_Init+0x4c>)
 8000576:	4a12      	ldr	r2, [pc, #72]	; (80005c0 <MX_USART2_UART_Init+0x50>)
 8000578:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800057a:	4b10      	ldr	r3, [pc, #64]	; (80005bc <MX_USART2_UART_Init+0x4c>)
 800057c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000580:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000582:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <MX_USART2_UART_Init+0x4c>)
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000588:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <MX_USART2_UART_Init+0x4c>)
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800058e:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <MX_USART2_UART_Init+0x4c>)
 8000590:	2200      	movs	r2, #0
 8000592:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000594:	4b09      	ldr	r3, [pc, #36]	; (80005bc <MX_USART2_UART_Init+0x4c>)
 8000596:	220c      	movs	r2, #12
 8000598:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800059a:	4b08      	ldr	r3, [pc, #32]	; (80005bc <MX_USART2_UART_Init+0x4c>)
 800059c:	2200      	movs	r2, #0
 800059e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <MX_USART2_UART_Init+0x4c>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005a6:	4805      	ldr	r0, [pc, #20]	; (80005bc <MX_USART2_UART_Init+0x4c>)
 80005a8:	f001 fb14 	bl	8001bd4 <HAL_UART_Init>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005b2:	f000 fa39 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000090 	.word	0x20000090
 80005c0:	40004400 	.word	0x40004400

080005c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <MX_GPIO_Init+0x2c>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <MX_GPIO_Init+0x2c>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <MX_GPIO_Init+0x2c>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005e6:	bf00      	nop
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr
 80005f0:	40023800 	.word	0x40023800

080005f4 <calculate_crc>:

/* USER CODE BEGIN 4 */
uint16_t calculate_crc(uint8_t* Data, size_t Size)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b087      	sub	sp, #28
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0xFFFF;
 80005fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000602:	82fb      	strh	r3, [r7, #22]
    for (size_t i = 0; i < Size; i++) {
 8000604:	2300      	movs	r3, #0
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	e022      	b.n	8000650 <calculate_crc+0x5c>
        crc ^= Data[i];
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	693b      	ldr	r3, [r7, #16]
 800060e:	4413      	add	r3, r2
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	b29a      	uxth	r2, r3
 8000614:	8afb      	ldrh	r3, [r7, #22]
 8000616:	4053      	eors	r3, r2
 8000618:	82fb      	strh	r3, [r7, #22]
        for (int j = 0; j < 8; j++) {
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	e011      	b.n	8000644 <calculate_crc+0x50>
            if (crc & 0x0001) {
 8000620:	8afb      	ldrh	r3, [r7, #22]
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	2b00      	cmp	r3, #0
 8000628:	d006      	beq.n	8000638 <calculate_crc+0x44>
                crc = (crc >> 1) ^ 0xA001;
 800062a:	8afb      	ldrh	r3, [r7, #22]
 800062c:	085b      	lsrs	r3, r3, #1
 800062e:	b29a      	uxth	r2, r3
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <calculate_crc+0x70>)
 8000632:	4053      	eors	r3, r2
 8000634:	82fb      	strh	r3, [r7, #22]
 8000636:	e002      	b.n	800063e <calculate_crc+0x4a>
            } else {
                crc = crc >> 1;
 8000638:	8afb      	ldrh	r3, [r7, #22]
 800063a:	085b      	lsrs	r3, r3, #1
 800063c:	82fb      	strh	r3, [r7, #22]
        for (int j = 0; j < 8; j++) {
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	3301      	adds	r3, #1
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	2b07      	cmp	r3, #7
 8000648:	ddea      	ble.n	8000620 <calculate_crc+0x2c>
    for (size_t i = 0; i < Size; i++) {
 800064a:	693b      	ldr	r3, [r7, #16]
 800064c:	3301      	adds	r3, #1
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693a      	ldr	r2, [r7, #16]
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	429a      	cmp	r2, r3
 8000656:	d3d8      	bcc.n	800060a <calculate_crc+0x16>
            }
        }
    }
    return crc;
 8000658:	8afb      	ldrh	r3, [r7, #22]
}
 800065a:	4618      	mov	r0, r3
 800065c:	371c      	adds	r7, #28
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr
 8000664:	ffffa001 	.word	0xffffa001

08000668 <check_crc>:

//Check CRC
uint8_t check_crc(uint8_t *Data_02, size_t Size)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	6039      	str	r1, [r7, #0]
	uint16_t CRC_Check = calculate_crc(Data_02, Size);
 8000672:	6839      	ldr	r1, [r7, #0]
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f7ff ffbd 	bl	80005f4 <calculate_crc>
 800067a:	4603      	mov	r3, r0
 800067c:	81fb      	strh	r3, [r7, #14]
	uint16_t Leng = sizeof(Data_02);
 800067e:	2304      	movs	r3, #4
 8000680:	81bb      	strh	r3, [r7, #12]
	if(  (uint8_t)((CRC_Check >>8) & 0xFF) == Data_02[Leng - 2]  && (uint8_t)(CRC_Check) == Data_02[Leng - 2]  )
 8000682:	89fb      	ldrh	r3, [r7, #14]
 8000684:	0a1b      	lsrs	r3, r3, #8
 8000686:	b29b      	uxth	r3, r3
 8000688:	b2da      	uxtb	r2, r3
 800068a:	89bb      	ldrh	r3, [r7, #12]
 800068c:	3b02      	subs	r3, #2
 800068e:	6879      	ldr	r1, [r7, #4]
 8000690:	440b      	add	r3, r1
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	429a      	cmp	r2, r3
 8000696:	d10a      	bne.n	80006ae <check_crc+0x46>
 8000698:	89fb      	ldrh	r3, [r7, #14]
 800069a:	b2da      	uxtb	r2, r3
 800069c:	89bb      	ldrh	r3, [r7, #12]
 800069e:	3b02      	subs	r3, #2
 80006a0:	6879      	ldr	r1, [r7, #4]
 80006a2:	440b      	add	r3, r1
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	429a      	cmp	r2, r3
 80006a8:	d101      	bne.n	80006ae <check_crc+0x46>
	{
		return 1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	e000      	b.n	80006b0 <check_crc+0x48>
	}
	else
	{
		return 0;
 80006ae:	2300      	movs	r3, #0
	}
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <Send_data_crc>:

// Send Data voi CRC
void Send_data_crc(uint8_t *Data, uint8_t Size)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	70fb      	strb	r3, [r7, #3]
    uint16_t Crc = calculate_crc(Data, Size);
 80006c4:	78fb      	ldrb	r3, [r7, #3]
 80006c6:	4619      	mov	r1, r3
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f7ff ff93 	bl	80005f4 <calculate_crc>
 80006ce:	4603      	mov	r3, r0
 80006d0:	817b      	strh	r3, [r7, #10]
    Data[Size + 1] = (uint8_t)(Crc >> 8);
 80006d2:	897b      	ldrh	r3, [r7, #10]
 80006d4:	0a1b      	lsrs	r3, r3, #8
 80006d6:	b299      	uxth	r1, r3
 80006d8:	78fb      	ldrb	r3, [r7, #3]
 80006da:	3301      	adds	r3, #1
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	4413      	add	r3, r2
 80006e0:	b2ca      	uxtb	r2, r1
 80006e2:	701a      	strb	r2, [r3, #0]
    Data[Size] = (uint8_t)(Crc);
 80006e4:	78fb      	ldrb	r3, [r7, #3]
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	4413      	add	r3, r2
 80006ea:	897a      	ldrh	r2, [r7, #10]
 80006ec:	b2d2      	uxtb	r2, r2
 80006ee:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, Data, Size + 2, 100);
 80006f0:	78fb      	ldrb	r3, [r7, #3]
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	3302      	adds	r3, #2
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	2364      	movs	r3, #100	; 0x64
 80006fa:	6879      	ldr	r1, [r7, #4]
 80006fc:	480a      	ldr	r0, [pc, #40]	; (8000728 <Send_data_crc+0x70>)
 80006fe:	f001 fab6 	bl	8001c6e <HAL_UART_Transmit>

    for(int j = 0; j < 256; j++)
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	e007      	b.n	8000718 <Send_data_crc+0x60>
    {
    	Data[j] = 0x00;
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	4413      	add	r3, r2
 800070e:	2200      	movs	r2, #0
 8000710:	701a      	strb	r2, [r3, #0]
    for(int j = 0; j < 256; j++)
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	3301      	adds	r3, #1
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	2bff      	cmp	r3, #255	; 0xff
 800071c:	ddf4      	ble.n	8000708 <Send_data_crc+0x50>
    }
}
 800071e:	bf00      	nop
 8000720:	bf00      	nop
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000090 	.word	0x20000090

0800072c <readHoldingRegs>:

// Xu li so lieu voi function code 0x03
uint8_t readHoldingRegs (void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
	uint16_t Start_Adr = ((Data_Received[2]<<8)|Data_Received[3]);  // start Register Address
 8000732:	4b2c      	ldr	r3, [pc, #176]	; (80007e4 <readHoldingRegs+0xb8>)
 8000734:	789b      	ldrb	r3, [r3, #2]
 8000736:	021b      	lsls	r3, r3, #8
 8000738:	b21a      	sxth	r2, r3
 800073a:	4b2a      	ldr	r3, [pc, #168]	; (80007e4 <readHoldingRegs+0xb8>)
 800073c:	78db      	ldrb	r3, [r3, #3]
 800073e:	b21b      	sxth	r3, r3
 8000740:	4313      	orrs	r3, r2
 8000742:	b21b      	sxth	r3, r3
 8000744:	81fb      	strh	r3, [r7, #14]

	uint16_t Leng_Data = ((Data_Received[4]<<8)|Data_Received[5]);   // number to registers master has requested
 8000746:	4b27      	ldr	r3, [pc, #156]	; (80007e4 <readHoldingRegs+0xb8>)
 8000748:	791b      	ldrb	r3, [r3, #4]
 800074a:	021b      	lsls	r3, r3, #8
 800074c:	b21a      	sxth	r2, r3
 800074e:	4b25      	ldr	r3, [pc, #148]	; (80007e4 <readHoldingRegs+0xb8>)
 8000750:	795b      	ldrb	r3, [r3, #5]
 8000752:	b21b      	sxth	r3, r3
 8000754:	4313      	orrs	r3, r2
 8000756:	b21b      	sxth	r3, r3
 8000758:	807b      	strh	r3, [r7, #2]
	uint16_t End_Adr = Start_Adr + Leng_Data - 1;  // end Register
 800075a:	89fa      	ldrh	r2, [r7, #14]
 800075c:	887b      	ldrh	r3, [r7, #2]
 800075e:	4413      	add	r3, r2
 8000760:	b29b      	uxth	r3, r3
 8000762:	3b01      	subs	r3, #1
 8000764:	803b      	strh	r3, [r7, #0]
	// Prepare TxData buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	Data_Send[0] = ID_Slave;  // slave ID
 8000766:	4b20      	ldr	r3, [pc, #128]	; (80007e8 <readHoldingRegs+0xbc>)
 8000768:	781a      	ldrb	r2, [r3, #0]
 800076a:	4b20      	ldr	r3, [pc, #128]	; (80007ec <readHoldingRegs+0xc0>)
 800076c:	701a      	strb	r2, [r3, #0]
	Data_Send[1] = Data_Received[1];  // function code
 800076e:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <readHoldingRegs+0xb8>)
 8000770:	785a      	ldrb	r2, [r3, #1]
 8000772:	4b1e      	ldr	r3, [pc, #120]	; (80007ec <readHoldingRegs+0xc0>)
 8000774:	705a      	strb	r2, [r3, #1]
	Data_Send[2] = Leng_Data*2;  // Byte count
 8000776:	887b      	ldrh	r3, [r7, #2]
 8000778:	b2db      	uxtb	r3, r3
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <readHoldingRegs+0xc0>)
 8000780:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // Can 3 vi tri cho 3 o dau tien, Luc sau la so vi tri cua Data
 8000782:	2303      	movs	r3, #3
 8000784:	60bb      	str	r3, [r7, #8]

	for (int i=0; i < Leng_Data; i++)
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	e01b      	b.n	80007c4 <readHoldingRegs+0x98>
	{
		Data_Send[indx++] = (Holding_Registers_Database[Start_Adr]>>8)&0xFF;  // 8 bit muc cao
 800078c:	89fb      	ldrh	r3, [r7, #14]
 800078e:	4a18      	ldr	r2, [pc, #96]	; (80007f0 <readHoldingRegs+0xc4>)
 8000790:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000794:	0a1b      	lsrs	r3, r3, #8
 8000796:	b299      	uxth	r1, r3
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	1c5a      	adds	r2, r3, #1
 800079c:	60ba      	str	r2, [r7, #8]
 800079e:	b2c9      	uxtb	r1, r1
 80007a0:	4a12      	ldr	r2, [pc, #72]	; (80007ec <readHoldingRegs+0xc0>)
 80007a2:	54d1      	strb	r1, [r2, r3]
		Data_Send[indx++] = (Holding_Registers_Database[Start_Adr])&0xFF;   //  8 bit muc thap
 80007a4:	89fb      	ldrh	r3, [r7, #14]
 80007a6:	4a12      	ldr	r2, [pc, #72]	; (80007f0 <readHoldingRegs+0xc4>)
 80007a8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	1c5a      	adds	r2, r3, #1
 80007b0:	60ba      	str	r2, [r7, #8]
 80007b2:	b2c9      	uxtb	r1, r1
 80007b4:	4a0d      	ldr	r2, [pc, #52]	; (80007ec <readHoldingRegs+0xc0>)
 80007b6:	54d1      	strb	r1, [r2, r3]
		Start_Adr++;  // increment the register address
 80007b8:	89fb      	ldrh	r3, [r7, #14]
 80007ba:	3301      	adds	r3, #1
 80007bc:	81fb      	strh	r3, [r7, #14]
	for (int i=0; i < Leng_Data; i++)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	3301      	adds	r3, #1
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	887b      	ldrh	r3, [r7, #2]
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	dbdf      	blt.n	800078c <readHoldingRegs+0x60>
	}

	Send_data_crc(Data_Send, indx) ; // send data... CRC will be calculated in the function itself
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	4619      	mov	r1, r3
 80007d2:	4806      	ldr	r0, [pc, #24]	; (80007ec <readHoldingRegs+0xc0>)
 80007d4:	f7ff ff70 	bl	80006b8 <Send_data_crc>
	return 1;   // success
 80007d8:	2301      	movs	r3, #1
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200000d4 	.word	0x200000d4
 80007e8:	20000064 	.word	0x20000064
 80007ec:	200001d4 	.word	0x200001d4
 80007f0:	20000000 	.word	0x20000000

080007f4 <writeMultRegs>:

// Xu li so lieu voi function code 0x10
uint8_t writeMultRegs (void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
	uint16_t Start_Adr = ((Data_Received[2]<<8)|Data_Received[3]);  // start Register Address
 80007fa:	4b30      	ldr	r3, [pc, #192]	; (80008bc <writeMultRegs+0xc8>)
 80007fc:	789b      	ldrb	r3, [r3, #2]
 80007fe:	021b      	lsls	r3, r3, #8
 8000800:	b21a      	sxth	r2, r3
 8000802:	4b2e      	ldr	r3, [pc, #184]	; (80008bc <writeMultRegs+0xc8>)
 8000804:	78db      	ldrb	r3, [r3, #3]
 8000806:	b21b      	sxth	r3, r3
 8000808:	4313      	orrs	r3, r2
 800080a:	b21b      	sxth	r3, r3
 800080c:	81fb      	strh	r3, [r7, #14]

	uint16_t Leng_Data = ((Data_Received[4]<<8)|Data_Received[5]);   // number to registers master has requested
 800080e:	4b2b      	ldr	r3, [pc, #172]	; (80008bc <writeMultRegs+0xc8>)
 8000810:	791b      	ldrb	r3, [r3, #4]
 8000812:	021b      	lsls	r3, r3, #8
 8000814:	b21a      	sxth	r2, r3
 8000816:	4b29      	ldr	r3, [pc, #164]	; (80008bc <writeMultRegs+0xc8>)
 8000818:	795b      	ldrb	r3, [r3, #5]
 800081a:	b21b      	sxth	r3, r3
 800081c:	4313      	orrs	r3, r2
 800081e:	b21b      	sxth	r3, r3
 8000820:	807b      	strh	r3, [r7, #2]
	uint16_t End_Adr = Start_Adr + Leng_Data - 1;  // end Register
 8000822:	89fa      	ldrh	r2, [r7, #14]
 8000824:	887b      	ldrh	r3, [r7, #2]
 8000826:	4413      	add	r3, r2
 8000828:	b29b      	uxth	r3, r3
 800082a:	3b01      	subs	r3, #1
 800082c:	803b      	strh	r3, [r7, #0]
	// Prepare TxData buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	Data_Send[0] = ID_Slave;  // slave ID
 800082e:	4b24      	ldr	r3, [pc, #144]	; (80008c0 <writeMultRegs+0xcc>)
 8000830:	781a      	ldrb	r2, [r3, #0]
 8000832:	4b24      	ldr	r3, [pc, #144]	; (80008c4 <writeMultRegs+0xd0>)
 8000834:	701a      	strb	r2, [r3, #0]
	Data_Send[1] = 0x10;  // function code
 8000836:	4b23      	ldr	r3, [pc, #140]	; (80008c4 <writeMultRegs+0xd0>)
 8000838:	2210      	movs	r2, #16
 800083a:	705a      	strb	r2, [r3, #1]
	Data_Send[2] = Data_Received[2];   // Start_Address HIGH
 800083c:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <writeMultRegs+0xc8>)
 800083e:	789a      	ldrb	r2, [r3, #2]
 8000840:	4b20      	ldr	r3, [pc, #128]	; (80008c4 <writeMultRegs+0xd0>)
 8000842:	709a      	strb	r2, [r3, #2]
	Data_Send[3] = Data_Received[3];   //  Start_Address LOW
 8000844:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <writeMultRegs+0xc8>)
 8000846:	78da      	ldrb	r2, [r3, #3]
 8000848:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <writeMultRegs+0xd0>)
 800084a:	70da      	strb	r2, [r3, #3]
	Data_Send[4] = (uint8_t)((Leng_Data>>8)&0xFF);   // Leng_Data HIGH
 800084c:	887b      	ldrh	r3, [r7, #2]
 800084e:	0a1b      	lsrs	r3, r3, #8
 8000850:	b29b      	uxth	r3, r3
 8000852:	b2da      	uxtb	r2, r3
 8000854:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <writeMultRegs+0xd0>)
 8000856:	711a      	strb	r2, [r3, #4]
	Data_Send[5] = (uint8_t)(Leng_Data & 0xFF);   // Leng_Data LOW
 8000858:	887b      	ldrh	r3, [r7, #2]
 800085a:	b2da      	uxtb	r2, r3
 800085c:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <writeMultRegs+0xd0>)
 800085e:	715a      	strb	r2, [r3, #5]

	int indx = 7;  //
 8000860:	2307      	movs	r3, #7
 8000862:	60bb      	str	r3, [r7, #8]

	for (int i=0; i < Leng_Data; i++)
 8000864:	2300      	movs	r3, #0
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	e01a      	b.n	80008a0 <writeMultRegs+0xac>
	{
		Holding_Registers_Database[Start_Adr] = ((Data_Received[indx] << 8) | Data_Received[indx + 1]); // Hop bit High vs Low
 800086a:	4a14      	ldr	r2, [pc, #80]	; (80008bc <writeMultRegs+0xc8>)
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	4413      	add	r3, r2
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	021b      	lsls	r3, r3, #8
 8000874:	b21a      	sxth	r2, r3
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	3301      	adds	r3, #1
 800087a:	4910      	ldr	r1, [pc, #64]	; (80008bc <writeMultRegs+0xc8>)
 800087c:	5ccb      	ldrb	r3, [r1, r3]
 800087e:	b21b      	sxth	r3, r3
 8000880:	4313      	orrs	r3, r2
 8000882:	b21a      	sxth	r2, r3
 8000884:	89fb      	ldrh	r3, [r7, #14]
 8000886:	b291      	uxth	r1, r2
 8000888:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <writeMultRegs+0xd4>)
 800088a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx += 2;
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	3302      	adds	r3, #2
 8000892:	60bb      	str	r3, [r7, #8]
		Start_Adr += 1;  // increment the register address
 8000894:	89fb      	ldrh	r3, [r7, #14]
 8000896:	3301      	adds	r3, #1
 8000898:	81fb      	strh	r3, [r7, #14]
	for (int i=0; i < Leng_Data; i++)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	3301      	adds	r3, #1
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	887b      	ldrh	r3, [r7, #2]
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	dbe0      	blt.n	800086a <writeMultRegs+0x76>
	}

	Send_data_crc(Data_Send, 6) ;
 80008a8:	2106      	movs	r1, #6
 80008aa:	4806      	ldr	r0, [pc, #24]	; (80008c4 <writeMultRegs+0xd0>)
 80008ac:	f7ff ff04 	bl	80006b8 <Send_data_crc>
	return 1;   // success
 80008b0:	2301      	movs	r3, #1
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	200000d4 	.word	0x200000d4
 80008c0:	20000064 	.word	0x20000064
 80008c4:	200001d4 	.word	0x200001d4
 80008c8:	20000000 	.word	0x20000000

080008cc <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80008cc:	b5b0      	push	{r4, r5, r7, lr}
 80008ce:	b09a      	sub	sp, #104	; 0x68
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	460b      	mov	r3, r1
 80008d6:	807b      	strh	r3, [r7, #2]
	uint8_t true_false_crc = check_crc(Data_Received, sizeof(Data_Received));
 80008d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008dc:	484c      	ldr	r0, [pc, #304]	; (8000a10 <HAL_UARTEx_RxEventCallback+0x144>)
 80008de:	f7ff fec3 	bl	8000668 <check_crc>
 80008e2:	4603      	mov	r3, r0
 80008e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if(true_false_crc == 1)
 80008e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d15a      	bne.n	80009a6 <HAL_UARTEx_RxEventCallback+0xda>
	{
		if(Data_Received[0] == ID_Slave)   // Check ID
 80008f0:	4b47      	ldr	r3, [pc, #284]	; (8000a10 <HAL_UARTEx_RxEventCallback+0x144>)
 80008f2:	781a      	ldrb	r2, [r3, #0]
 80008f4:	4b47      	ldr	r3, [pc, #284]	; (8000a14 <HAL_UARTEx_RxEventCallback+0x148>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d130      	bne.n	800095e <HAL_UARTEx_RxEventCallback+0x92>
		{
			if(Data_Received[1] == 0x03)    // Check Function code
 80008fc:	4b44      	ldr	r3, [pc, #272]	; (8000a10 <HAL_UARTEx_RxEventCallback+0x144>)
 80008fe:	785b      	ldrb	r3, [r3, #1]
 8000900:	2b03      	cmp	r3, #3
 8000902:	d102      	bne.n	800090a <HAL_UARTEx_RxEventCallback+0x3e>
			{
				readHoldingRegs();
 8000904:	f7ff ff12 	bl	800072c <readHoldingRegs>
 8000908:	e06a      	b.n	80009e0 <HAL_UARTEx_RxEventCallback+0x114>
			}
			else if(Data_Received[1] == 0x10)    // Check Function code
 800090a:	4b41      	ldr	r3, [pc, #260]	; (8000a10 <HAL_UARTEx_RxEventCallback+0x144>)
 800090c:	785b      	ldrb	r3, [r3, #1]
 800090e:	2b10      	cmp	r3, #16
 8000910:	d102      	bne.n	8000918 <HAL_UARTEx_RxEventCallback+0x4c>
			{
				writeMultRegs();
 8000912:	f7ff ff6f 	bl	80007f4 <writeMultRegs>
 8000916:	e063      	b.n	80009e0 <HAL_UARTEx_RxEventCallback+0x114>
			}
			else
			{
				uint8_t Error_02[50] = "Loi Function code";
 8000918:	4b3f      	ldr	r3, [pc, #252]	; (8000a18 <HAL_UARTEx_RxEventCallback+0x14c>)
 800091a:	f107 040c 	add.w	r4, r7, #12
 800091e:	461d      	mov	r5, r3
 8000920:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000922:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000924:	682b      	ldr	r3, [r5, #0]
 8000926:	8023      	strh	r3, [r4, #0]
 8000928:	f107 031e 	add.w	r3, r7, #30
 800092c:	2220      	movs	r2, #32
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f001 ff25 	bl	8002780 <memset>
				for(int i = 0; i < sizeof(Error_02); i++)
 8000936:	2300      	movs	r3, #0
 8000938:	667b      	str	r3, [r7, #100]	; 0x64
 800093a:	e00c      	b.n	8000956 <HAL_UARTEx_RxEventCallback+0x8a>
				{
					HAL_UART_Transmit(&huart2, &Error_02[i], sizeof(Error_02[i]), 1000);
 800093c:	f107 020c 	add.w	r2, r7, #12
 8000940:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000942:	18d1      	adds	r1, r2, r3
 8000944:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000948:	2201      	movs	r2, #1
 800094a:	4834      	ldr	r0, [pc, #208]	; (8000a1c <HAL_UARTEx_RxEventCallback+0x150>)
 800094c:	f001 f98f 	bl	8001c6e <HAL_UART_Transmit>
				for(int i = 0; i < sizeof(Error_02); i++)
 8000950:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000952:	3301      	adds	r3, #1
 8000954:	667b      	str	r3, [r7, #100]	; 0x64
 8000956:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000958:	2b31      	cmp	r3, #49	; 0x31
 800095a:	d9ef      	bls.n	800093c <HAL_UARTEx_RxEventCallback+0x70>
 800095c:	e040      	b.n	80009e0 <HAL_UARTEx_RxEventCallback+0x114>
			}

		}
		else
		{
			uint8_t Error_01[10] = "Loi ID";
 800095e:	4a30      	ldr	r2, [pc, #192]	; (8000a20 <HAL_UARTEx_RxEventCallback+0x154>)
 8000960:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000964:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000968:	6018      	str	r0, [r3, #0]
 800096a:	3304      	adds	r3, #4
 800096c:	8019      	strh	r1, [r3, #0]
 800096e:	3302      	adds	r3, #2
 8000970:	0c0a      	lsrs	r2, r1, #16
 8000972:	701a      	strb	r2, [r3, #0]
 8000974:	f107 0353 	add.w	r3, r7, #83	; 0x53
 8000978:	2200      	movs	r2, #0
 800097a:	801a      	strh	r2, [r3, #0]
 800097c:	709a      	strb	r2, [r3, #2]
			for(int i = 0; i < sizeof(Error_01); i++)
 800097e:	2300      	movs	r3, #0
 8000980:	663b      	str	r3, [r7, #96]	; 0x60
 8000982:	e00c      	b.n	800099e <HAL_UARTEx_RxEventCallback+0xd2>
			{
				HAL_UART_Transmit(&huart2, &Error_01[i], sizeof(Error_01[i]), 1000);
 8000984:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000988:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800098a:	18d1      	adds	r1, r2, r3
 800098c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000990:	2201      	movs	r2, #1
 8000992:	4822      	ldr	r0, [pc, #136]	; (8000a1c <HAL_UARTEx_RxEventCallback+0x150>)
 8000994:	f001 f96b 	bl	8001c6e <HAL_UART_Transmit>
			for(int i = 0; i < sizeof(Error_01); i++)
 8000998:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800099a:	3301      	adds	r3, #1
 800099c:	663b      	str	r3, [r7, #96]	; 0x60
 800099e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80009a0:	2b09      	cmp	r3, #9
 80009a2:	d9ef      	bls.n	8000984 <HAL_UARTEx_RxEventCallback+0xb8>
 80009a4:	e01c      	b.n	80009e0 <HAL_UARTEx_RxEventCallback+0x114>
		}
	}

	else
	{
		uint8_t Error_03[10] = "Loi CRC";
 80009a6:	4a1f      	ldr	r2, [pc, #124]	; (8000a24 <HAL_UARTEx_RxEventCallback+0x158>)
 80009a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009b0:	e883 0003 	stmia.w	r3, {r0, r1}
 80009b4:	2300      	movs	r3, #0
 80009b6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		for(int i = 0; i < sizeof(Error_03); i++)
 80009ba:	2300      	movs	r3, #0
 80009bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80009be:	e00c      	b.n	80009da <HAL_UARTEx_RxEventCallback+0x10e>
		{
			HAL_UART_Transmit(&huart2, &Error_03[i], sizeof(Error_03[i]), 1000);
 80009c0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80009c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009c6:	18d1      	adds	r1, r2, r3
 80009c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009cc:	2201      	movs	r2, #1
 80009ce:	4813      	ldr	r0, [pc, #76]	; (8000a1c <HAL_UARTEx_RxEventCallback+0x150>)
 80009d0:	f001 f94d 	bl	8001c6e <HAL_UART_Transmit>
		for(int i = 0; i < sizeof(Error_03); i++)
 80009d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009d6:	3301      	adds	r3, #1
 80009d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80009da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009dc:	2b09      	cmp	r3, #9
 80009de:	d9ef      	bls.n	80009c0 <HAL_UARTEx_RxEventCallback+0xf4>
		}
	}
	for(int k = 0; k < 256; k ++)
 80009e0:	2300      	movs	r3, #0
 80009e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80009e4:	e007      	b.n	80009f6 <HAL_UARTEx_RxEventCallback+0x12a>
	{
		Data_Received[k] = 0x00;
 80009e6:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <HAL_UARTEx_RxEventCallback+0x144>)
 80009e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009ea:	4413      	add	r3, r2
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]
	for(int k = 0; k < 256; k ++)
 80009f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009f2:	3301      	adds	r3, #1
 80009f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80009f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009f8:	2bff      	cmp	r3, #255	; 0xff
 80009fa:	ddf4      	ble.n	80009e6 <HAL_UARTEx_RxEventCallback+0x11a>
	}
	  HAL_UARTEx_ReceiveToIdle_IT(&huart2, Data_Received, 256);
 80009fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a00:	4903      	ldr	r1, [pc, #12]	; (8000a10 <HAL_UARTEx_RxEventCallback+0x144>)
 8000a02:	4806      	ldr	r0, [pc, #24]	; (8000a1c <HAL_UARTEx_RxEventCallback+0x150>)
 8000a04:	f001 f9c5 	bl	8001d92 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8000a08:	bf00      	nop
 8000a0a:	3768      	adds	r7, #104	; 0x68
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bdb0      	pop	{r4, r5, r7, pc}
 8000a10:	200000d4 	.word	0x200000d4
 8000a14:	20000064 	.word	0x20000064
 8000a18:	080027a8 	.word	0x080027a8
 8000a1c:	20000090 	.word	0x20000090
 8000a20:	080027dc 	.word	0x080027dc
 8000a24:	080027e8 	.word	0x080027e8

08000a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2c:	b672      	cpsid	i
}
 8000a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <Error_Handler+0x8>
	...

08000a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <HAL_MspInit+0x48>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <HAL_MspInit+0x48>)
 8000a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a48:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <HAL_MspInit+0x48>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <HAL_MspInit+0x48>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	4a07      	ldr	r2, [pc, #28]	; (8000a7c <HAL_MspInit+0x48>)
 8000a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a64:	6413      	str	r3, [r2, #64]	; 0x40
 8000a66:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <HAL_MspInit+0x48>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr
 8000a7c:	40023800 	.word	0x40023800

08000a80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	; 0x28
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a1d      	ldr	r2, [pc, #116]	; (8000b14 <HAL_UART_MspInit+0x94>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d133      	bne.n	8000b0a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <HAL_UART_MspInit+0x98>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	4a1b      	ldr	r2, [pc, #108]	; (8000b18 <HAL_UART_MspInit+0x98>)
 8000aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab2:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <HAL_UART_MspInit+0x98>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aba:	613b      	str	r3, [r7, #16]
 8000abc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <HAL_UART_MspInit+0x98>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a14      	ldr	r2, [pc, #80]	; (8000b18 <HAL_UART_MspInit+0x98>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <HAL_UART_MspInit+0x98>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ada:	230c      	movs	r3, #12
 8000adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aea:	2307      	movs	r3, #7
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	4619      	mov	r1, r3
 8000af4:	4809      	ldr	r0, [pc, #36]	; (8000b1c <HAL_UART_MspInit+0x9c>)
 8000af6:	f000 fa81 	bl	8000ffc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	2026      	movs	r0, #38	; 0x26
 8000b00:	f000 f9b5 	bl	8000e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b04:	2026      	movs	r0, #38	; 0x26
 8000b06:	f000 f9ce 	bl	8000ea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b0a:	bf00      	nop
 8000b0c:	3728      	adds	r7, #40	; 0x28
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40004400 	.word	0x40004400
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40020000 	.word	0x40020000

08000b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <NMI_Handler+0x4>

08000b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <HardFault_Handler+0x4>

08000b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <MemManage_Handler+0x4>

08000b32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <BusFault_Handler+0x4>

08000b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <UsageFault_Handler+0x4>

08000b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr

08000b4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr

08000b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr

08000b62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b66:	f000 f88f 	bl	8000c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b74:	4802      	ldr	r0, [pc, #8]	; (8000b80 <USART2_IRQHandler+0x10>)
 8000b76:	f001 f95b 	bl	8001e30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000090 	.word	0x20000090

08000b84 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr

08000b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b94:	480d      	ldr	r0, [pc, #52]	; (8000bcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b96:	490e      	ldr	r1, [pc, #56]	; (8000bd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b98:	4a0e      	ldr	r2, [pc, #56]	; (8000bd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b9c:	e002      	b.n	8000ba4 <LoopCopyDataInit>

08000b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba2:	3304      	adds	r3, #4

08000ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba8:	d3f9      	bcc.n	8000b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000baa:	4a0b      	ldr	r2, [pc, #44]	; (8000bd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bac:	4c0b      	ldr	r4, [pc, #44]	; (8000bdc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb0:	e001      	b.n	8000bb6 <LoopFillZerobss>

08000bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb4:	3204      	adds	r2, #4

08000bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb8:	d3fb      	bcc.n	8000bb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bba:	f7ff ffe3 	bl	8000b84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bbe:	f001 fdbb 	bl	8002738 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bc2:	f7ff fc83 	bl	80004cc <main>
  bx  lr    
 8000bc6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000bd4:	0800281c 	.word	0x0800281c
  ldr r2, =_sbss
 8000bd8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000bdc:	200002d8 	.word	0x200002d8

08000be0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be0:	e7fe      	b.n	8000be0 <ADC_IRQHandler>
	...

08000be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <HAL_Init+0x40>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <HAL_Init+0x40>)
 8000bee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bf4:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <HAL_Init+0x40>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <HAL_Init+0x40>)
 8000bfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <HAL_Init+0x40>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a07      	ldr	r2, [pc, #28]	; (8000c24 <HAL_Init+0x40>)
 8000c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f000 f923 	bl	8000e58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c12:	200f      	movs	r0, #15
 8000c14:	f000 f808 	bl	8000c28 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000c18:	f7ff ff0c 	bl	8000a34 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40023c00 	.word	0x40023c00

08000c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_InitTick+0x54>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <HAL_InitTick+0x58>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c46:	4618      	mov	r0, r3
 8000c48:	f000 f93b 	bl	8000ec2 <HAL_SYSTICK_Config>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e00e      	b.n	8000c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2b0f      	cmp	r3, #15
 8000c5a:	d80a      	bhi.n	8000c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	f04f 30ff 	mov.w	r0, #4294967295
 8000c64:	f000 f903 	bl	8000e6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c68:	4a06      	ldr	r2, [pc, #24]	; (8000c84 <HAL_InitTick+0x5c>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e000      	b.n	8000c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000068 	.word	0x20000068
 8000c80:	20000070 	.word	0x20000070
 8000c84:	2000006c 	.word	0x2000006c

08000c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <HAL_IncTick+0x1c>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <HAL_IncTick+0x20>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4413      	add	r3, r2
 8000c98:	4a03      	ldr	r2, [pc, #12]	; (8000ca8 <HAL_IncTick+0x20>)
 8000c9a:	6013      	str	r3, [r2, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr
 8000ca4:	20000070 	.word	0x20000070
 8000ca8:	200002d4 	.word	0x200002d4

08000cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb0:	4b02      	ldr	r3, [pc, #8]	; (8000cbc <HAL_GetTick+0x10>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr
 8000cbc:	200002d4 	.word	0x200002d4

08000cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf2:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	60d3      	str	r3, [r2, #12]
}
 8000cf8:	bf00      	nop
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <__NVIC_GetPriorityGrouping+0x18>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	0a1b      	lsrs	r3, r3, #8
 8000d12:	f003 0307 	and.w	r3, r3, #7
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	db0b      	blt.n	8000d4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	f003 021f 	and.w	r2, r3, #31
 8000d3c:	4906      	ldr	r1, [pc, #24]	; (8000d58 <__NVIC_EnableIRQ+0x34>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	095b      	lsrs	r3, r3, #5
 8000d44:	2001      	movs	r0, #1
 8000d46:	fa00 f202 	lsl.w	r2, r0, r2
 8000d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr
 8000d58:	e000e100 	.word	0xe000e100

08000d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	6039      	str	r1, [r7, #0]
 8000d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	db0a      	blt.n	8000d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	490c      	ldr	r1, [pc, #48]	; (8000da8 <__NVIC_SetPriority+0x4c>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	0112      	lsls	r2, r2, #4
 8000d7c:	b2d2      	uxtb	r2, r2
 8000d7e:	440b      	add	r3, r1
 8000d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d84:	e00a      	b.n	8000d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4908      	ldr	r1, [pc, #32]	; (8000dac <__NVIC_SetPriority+0x50>)
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	f003 030f 	and.w	r3, r3, #15
 8000d92:	3b04      	subs	r3, #4
 8000d94:	0112      	lsls	r2, r2, #4
 8000d96:	b2d2      	uxtb	r2, r2
 8000d98:	440b      	add	r3, r1
 8000d9a:	761a      	strb	r2, [r3, #24]
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000e100 	.word	0xe000e100
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b089      	sub	sp, #36	; 0x24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f1c3 0307 	rsb	r3, r3, #7
 8000dca:	2b04      	cmp	r3, #4
 8000dcc:	bf28      	it	cs
 8000dce:	2304      	movcs	r3, #4
 8000dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	2b06      	cmp	r3, #6
 8000dd8:	d902      	bls.n	8000de0 <NVIC_EncodePriority+0x30>
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3b03      	subs	r3, #3
 8000dde:	e000      	b.n	8000de2 <NVIC_EncodePriority+0x32>
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	f04f 32ff 	mov.w	r2, #4294967295
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43da      	mvns	r2, r3
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	401a      	ands	r2, r3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000e02:	43d9      	mvns	r1, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	4313      	orrs	r3, r2
         );
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3724      	adds	r7, #36	; 0x24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr

08000e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e24:	d301      	bcc.n	8000e2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e26:	2301      	movs	r3, #1
 8000e28:	e00f      	b.n	8000e4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e2a:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <SysTick_Config+0x40>)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e32:	210f      	movs	r1, #15
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295
 8000e38:	f7ff ff90 	bl	8000d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <SysTick_Config+0x40>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e42:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <SysTick_Config+0x40>)
 8000e44:	2207      	movs	r2, #7
 8000e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	e000e010 	.word	0xe000e010

08000e58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f7ff ff2d 	bl	8000cc0 <__NVIC_SetPriorityGrouping>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b086      	sub	sp, #24
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	4603      	mov	r3, r0
 8000e76:	60b9      	str	r1, [r7, #8]
 8000e78:	607a      	str	r2, [r7, #4]
 8000e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e80:	f7ff ff42 	bl	8000d08 <__NVIC_GetPriorityGrouping>
 8000e84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	68b9      	ldr	r1, [r7, #8]
 8000e8a:	6978      	ldr	r0, [r7, #20]
 8000e8c:	f7ff ff90 	bl	8000db0 <NVIC_EncodePriority>
 8000e90:	4602      	mov	r2, r0
 8000e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e96:	4611      	mov	r1, r2
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff5f 	bl	8000d5c <__NVIC_SetPriority>
}
 8000e9e:	bf00      	nop
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	4603      	mov	r3, r0
 8000eae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff35 	bl	8000d24 <__NVIC_EnableIRQ>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff ffa2 	bl	8000e14 <SysTick_Config>
 8000ed0:	4603      	mov	r3, r0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b084      	sub	sp, #16
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000ee8:	f7ff fee0 	bl	8000cac <HAL_GetTick>
 8000eec:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d008      	beq.n	8000f0c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2280      	movs	r2, #128	; 0x80
 8000efe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e052      	b.n	8000fb2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f022 0216 	bic.w	r2, r2, #22
 8000f1a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	695a      	ldr	r2, [r3, #20]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f2a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d103      	bne.n	8000f3c <HAL_DMA_Abort+0x62>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d007      	beq.n	8000f4c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f022 0208 	bic.w	r2, r2, #8
 8000f4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f022 0201 	bic.w	r2, r2, #1
 8000f5a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f5c:	e013      	b.n	8000f86 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f5e:	f7ff fea5 	bl	8000cac <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	2b05      	cmp	r3, #5
 8000f6a:	d90c      	bls.n	8000f86 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2220      	movs	r2, #32
 8000f70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2203      	movs	r2, #3
 8000f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000f82:	2303      	movs	r3, #3
 8000f84:	e015      	b.n	8000fb2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1e4      	bne.n	8000f5e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f98:	223f      	movs	r2, #63	; 0x3f
 8000f9a:	409a      	lsls	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d004      	beq.n	8000fd8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2280      	movs	r2, #128	; 0x80
 8000fd2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e00c      	b.n	8000ff2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2205      	movs	r2, #5
 8000fdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f022 0201 	bic.w	r2, r2, #1
 8000fee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr

08000ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b087      	sub	sp, #28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800100a:	e16f      	b.n	80012ec <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	2101      	movs	r1, #1
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	fa01 f303 	lsl.w	r3, r1, r3
 8001018:	4013      	ands	r3, r2
 800101a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2b00      	cmp	r3, #0
 8001020:	f000 8161 	beq.w	80012e6 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 0303 	and.w	r3, r3, #3
 800102c:	2b01      	cmp	r3, #1
 800102e:	d005      	beq.n	800103c <HAL_GPIO_Init+0x40>
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 0303 	and.w	r3, r3, #3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d130      	bne.n	800109e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	2203      	movs	r2, #3
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	68da      	ldr	r2, [r3, #12]
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4313      	orrs	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001072:	2201      	movs	r2, #1
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	091b      	lsrs	r3, r3, #4
 8001088:	f003 0201 	and.w	r2, r3, #1
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	2b03      	cmp	r3, #3
 80010a8:	d017      	beq.n	80010da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	2203      	movs	r2, #3
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	689a      	ldr	r2, [r3, #8]
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 0303 	and.w	r3, r3, #3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d123      	bne.n	800112e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	08da      	lsrs	r2, r3, #3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3208      	adds	r2, #8
 80010ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	220f      	movs	r2, #15
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	691a      	ldr	r2, [r3, #16]
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	f003 0307 	and.w	r3, r3, #7
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	08da      	lsrs	r2, r3, #3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3208      	adds	r2, #8
 8001128:	6939      	ldr	r1, [r7, #16]
 800112a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	2203      	movs	r2, #3
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	4013      	ands	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f003 0203 	and.w	r2, r3, #3
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800116a:	2b00      	cmp	r3, #0
 800116c:	f000 80bb 	beq.w	80012e6 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001170:	2300      	movs	r3, #0
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	4b64      	ldr	r3, [pc, #400]	; (8001308 <HAL_GPIO_Init+0x30c>)
 8001176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001178:	4a63      	ldr	r2, [pc, #396]	; (8001308 <HAL_GPIO_Init+0x30c>)
 800117a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800117e:	6453      	str	r3, [r2, #68]	; 0x44
 8001180:	4b61      	ldr	r3, [pc, #388]	; (8001308 <HAL_GPIO_Init+0x30c>)
 8001182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001184:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800118c:	4a5f      	ldr	r2, [pc, #380]	; (800130c <HAL_GPIO_Init+0x310>)
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	089b      	lsrs	r3, r3, #2
 8001192:	3302      	adds	r3, #2
 8001194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001198:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	220f      	movs	r2, #15
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a57      	ldr	r2, [pc, #348]	; (8001310 <HAL_GPIO_Init+0x314>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d031      	beq.n	800121c <HAL_GPIO_Init+0x220>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a56      	ldr	r2, [pc, #344]	; (8001314 <HAL_GPIO_Init+0x318>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d02b      	beq.n	8001218 <HAL_GPIO_Init+0x21c>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a55      	ldr	r2, [pc, #340]	; (8001318 <HAL_GPIO_Init+0x31c>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d025      	beq.n	8001214 <HAL_GPIO_Init+0x218>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a54      	ldr	r2, [pc, #336]	; (800131c <HAL_GPIO_Init+0x320>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d01f      	beq.n	8001210 <HAL_GPIO_Init+0x214>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a53      	ldr	r2, [pc, #332]	; (8001320 <HAL_GPIO_Init+0x324>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d019      	beq.n	800120c <HAL_GPIO_Init+0x210>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a52      	ldr	r2, [pc, #328]	; (8001324 <HAL_GPIO_Init+0x328>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d013      	beq.n	8001208 <HAL_GPIO_Init+0x20c>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a51      	ldr	r2, [pc, #324]	; (8001328 <HAL_GPIO_Init+0x32c>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d00d      	beq.n	8001204 <HAL_GPIO_Init+0x208>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a50      	ldr	r2, [pc, #320]	; (800132c <HAL_GPIO_Init+0x330>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d007      	beq.n	8001200 <HAL_GPIO_Init+0x204>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a4f      	ldr	r2, [pc, #316]	; (8001330 <HAL_GPIO_Init+0x334>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d101      	bne.n	80011fc <HAL_GPIO_Init+0x200>
 80011f8:	2308      	movs	r3, #8
 80011fa:	e010      	b.n	800121e <HAL_GPIO_Init+0x222>
 80011fc:	2309      	movs	r3, #9
 80011fe:	e00e      	b.n	800121e <HAL_GPIO_Init+0x222>
 8001200:	2307      	movs	r3, #7
 8001202:	e00c      	b.n	800121e <HAL_GPIO_Init+0x222>
 8001204:	2306      	movs	r3, #6
 8001206:	e00a      	b.n	800121e <HAL_GPIO_Init+0x222>
 8001208:	2305      	movs	r3, #5
 800120a:	e008      	b.n	800121e <HAL_GPIO_Init+0x222>
 800120c:	2304      	movs	r3, #4
 800120e:	e006      	b.n	800121e <HAL_GPIO_Init+0x222>
 8001210:	2303      	movs	r3, #3
 8001212:	e004      	b.n	800121e <HAL_GPIO_Init+0x222>
 8001214:	2302      	movs	r3, #2
 8001216:	e002      	b.n	800121e <HAL_GPIO_Init+0x222>
 8001218:	2301      	movs	r3, #1
 800121a:	e000      	b.n	800121e <HAL_GPIO_Init+0x222>
 800121c:	2300      	movs	r3, #0
 800121e:	697a      	ldr	r2, [r7, #20]
 8001220:	f002 0203 	and.w	r2, r2, #3
 8001224:	0092      	lsls	r2, r2, #2
 8001226:	4093      	lsls	r3, r2
 8001228:	461a      	mov	r2, r3
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001230:	4936      	ldr	r1, [pc, #216]	; (800130c <HAL_GPIO_Init+0x310>)
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	089b      	lsrs	r3, r3, #2
 8001236:	3302      	adds	r3, #2
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800123e:	4b3d      	ldr	r3, [pc, #244]	; (8001334 <HAL_GPIO_Init+0x338>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	43db      	mvns	r3, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4313      	orrs	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001262:	4a34      	ldr	r2, [pc, #208]	; (8001334 <HAL_GPIO_Init+0x338>)
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001268:	4b32      	ldr	r3, [pc, #200]	; (8001334 <HAL_GPIO_Init+0x338>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	43db      	mvns	r3, r3
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	4313      	orrs	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800128c:	4a29      	ldr	r2, [pc, #164]	; (8001334 <HAL_GPIO_Init+0x338>)
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001292:	4b28      	ldr	r3, [pc, #160]	; (8001334 <HAL_GPIO_Init+0x338>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	43db      	mvns	r3, r3
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012b6:	4a1f      	ldr	r2, [pc, #124]	; (8001334 <HAL_GPIO_Init+0x338>)
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012bc:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <HAL_GPIO_Init+0x338>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012e0:	4a14      	ldr	r2, [pc, #80]	; (8001334 <HAL_GPIO_Init+0x338>)
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	3301      	adds	r3, #1
 80012ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	fa22 f303 	lsr.w	r3, r2, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f47f ae88 	bne.w	800100c <HAL_GPIO_Init+0x10>
  }
}
 80012fc:	bf00      	nop
 80012fe:	bf00      	nop
 8001300:	371c      	adds	r7, #28
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr
 8001308:	40023800 	.word	0x40023800
 800130c:	40013800 	.word	0x40013800
 8001310:	40020000 	.word	0x40020000
 8001314:	40020400 	.word	0x40020400
 8001318:	40020800 	.word	0x40020800
 800131c:	40020c00 	.word	0x40020c00
 8001320:	40021000 	.word	0x40021000
 8001324:	40021400 	.word	0x40021400
 8001328:	40021800 	.word	0x40021800
 800132c:	40021c00 	.word	0x40021c00
 8001330:	40022000 	.word	0x40022000
 8001334:	40013c00 	.word	0x40013c00

08001338 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	; 0x28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e236      	b.n	80017b8 <HAL_RCC_OscConfig+0x480>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b00      	cmp	r3, #0
 8001354:	d050      	beq.n	80013f8 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001356:	4b9e      	ldr	r3, [pc, #632]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 030c 	and.w	r3, r3, #12
 800135e:	2b04      	cmp	r3, #4
 8001360:	d00c      	beq.n	800137c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001362:	4b9b      	ldr	r3, [pc, #620]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800136a:	2b08      	cmp	r3, #8
 800136c:	d112      	bne.n	8001394 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800136e:	4b98      	ldr	r3, [pc, #608]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001376:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800137a:	d10b      	bne.n	8001394 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800137c:	4b94      	ldr	r3, [pc, #592]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d036      	beq.n	80013f6 <HAL_RCC_OscConfig+0xbe>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d132      	bne.n	80013f6 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e211      	b.n	80017b8 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	4b8e      	ldr	r3, [pc, #568]	; (80015d4 <HAL_RCC_OscConfig+0x29c>)
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d013      	beq.n	80013ce <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a6:	f7ff fc81 	bl	8000cac <HAL_GetTick>
 80013aa:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ae:	f7ff fc7d 	bl	8000cac <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	6a3b      	ldr	r3, [r7, #32]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b64      	cmp	r3, #100	; 0x64
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e1fb      	b.n	80017b8 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c0:	4b83      	ldr	r3, [pc, #524]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0f0      	beq.n	80013ae <HAL_RCC_OscConfig+0x76>
 80013cc:	e014      	b.n	80013f8 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ce:	f7ff fc6d 	bl	8000cac <HAL_GetTick>
 80013d2:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013d4:	e008      	b.n	80013e8 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d6:	f7ff fc69 	bl	8000cac <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	6a3b      	ldr	r3, [r7, #32]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b64      	cmp	r3, #100	; 0x64
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e1e7      	b.n	80017b8 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013e8:	4b79      	ldr	r3, [pc, #484]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1f0      	bne.n	80013d6 <HAL_RCC_OscConfig+0x9e>
 80013f4:	e000      	b.n	80013f8 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d077      	beq.n	80014f4 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001404:	4b72      	ldr	r3, [pc, #456]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 030c 	and.w	r3, r3, #12
 800140c:	2b00      	cmp	r3, #0
 800140e:	d00b      	beq.n	8001428 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001410:	4b6f      	ldr	r3, [pc, #444]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001418:	2b08      	cmp	r3, #8
 800141a:	d126      	bne.n	800146a <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800141c:	4b6c      	ldr	r3, [pc, #432]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d120      	bne.n	800146a <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001428:	4b69      	ldr	r3, [pc, #420]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d005      	beq.n	8001440 <HAL_RCC_OscConfig+0x108>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d001      	beq.n	8001440 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e1bb      	b.n	80017b8 <HAL_RCC_OscConfig+0x480>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001440:	4b63      	ldr	r3, [pc, #396]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	21f8      	movs	r1, #248	; 0xf8
 800144e:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001450:	69b9      	ldr	r1, [r7, #24]
 8001452:	fa91 f1a1 	rbit	r1, r1
 8001456:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001458:	6979      	ldr	r1, [r7, #20]
 800145a:	fab1 f181 	clz	r1, r1
 800145e:	b2c9      	uxtb	r1, r1
 8001460:	408b      	lsls	r3, r1
 8001462:	495b      	ldr	r1, [pc, #364]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 8001464:	4313      	orrs	r3, r2
 8001466:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001468:	e044      	b.n	80014f4 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d02a      	beq.n	80014c8 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001472:	4b59      	ldr	r3, [pc, #356]	; (80015d8 <HAL_RCC_OscConfig+0x2a0>)
 8001474:	2201      	movs	r2, #1
 8001476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001478:	f7ff fc18 	bl	8000cac <HAL_GetTick>
 800147c:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001480:	f7ff fc14 	bl	8000cac <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	6a3b      	ldr	r3, [r7, #32]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e192      	b.n	80017b8 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001492:	4b4f      	ldr	r3, [pc, #316]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0f0      	beq.n	8001480 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149e:	4b4c      	ldr	r3, [pc, #304]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	21f8      	movs	r1, #248	; 0xf8
 80014ac:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ae:	6939      	ldr	r1, [r7, #16]
 80014b0:	fa91 f1a1 	rbit	r1, r1
 80014b4:	60f9      	str	r1, [r7, #12]
  return result;
 80014b6:	68f9      	ldr	r1, [r7, #12]
 80014b8:	fab1 f181 	clz	r1, r1
 80014bc:	b2c9      	uxtb	r1, r1
 80014be:	408b      	lsls	r3, r1
 80014c0:	4943      	ldr	r1, [pc, #268]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	600b      	str	r3, [r1, #0]
 80014c6:	e015      	b.n	80014f4 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014c8:	4b43      	ldr	r3, [pc, #268]	; (80015d8 <HAL_RCC_OscConfig+0x2a0>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ce:	f7ff fbed 	bl	8000cac <HAL_GetTick>
 80014d2:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014d6:	f7ff fbe9 	bl	8000cac <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	6a3b      	ldr	r3, [r7, #32]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e167      	b.n	80017b8 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014e8:	4b39      	ldr	r3, [pc, #228]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1f0      	bne.n	80014d6 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0308 	and.w	r3, r3, #8
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d030      	beq.n	8001562 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d016      	beq.n	8001536 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001508:	4b34      	ldr	r3, [pc, #208]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 800150a:	2201      	movs	r2, #1
 800150c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150e:	f7ff fbcd 	bl	8000cac <HAL_GetTick>
 8001512:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001516:	f7ff fbc9 	bl	8000cac <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	6a3b      	ldr	r3, [r7, #32]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e147      	b.n	80017b8 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001528:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 800152a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0f0      	beq.n	8001516 <HAL_RCC_OscConfig+0x1de>
 8001534:	e015      	b.n	8001562 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001536:	4b29      	ldr	r3, [pc, #164]	; (80015dc <HAL_RCC_OscConfig+0x2a4>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153c:	f7ff fbb6 	bl	8000cac <HAL_GetTick>
 8001540:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001544:	f7ff fbb2 	bl	8000cac <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	6a3b      	ldr	r3, [r7, #32]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e130      	b.n	80017b8 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001556:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 8001558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0304 	and.w	r3, r3, #4
 800156a:	2b00      	cmp	r3, #0
 800156c:	f000 8087 	beq.w	800167e <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001570:	2300      	movs	r3, #0
 8001572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001576:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d110      	bne.n	80015a4 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	4a11      	ldr	r2, [pc, #68]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 800158c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001590:	6413      	str	r3, [r2, #64]	; 0x40
 8001592:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <HAL_RCC_OscConfig+0x298>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800159e:	2301      	movs	r3, #1
 80015a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80015a4:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <HAL_RCC_OscConfig+0x2a8>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a0d      	ldr	r2, [pc, #52]	; (80015e0 <HAL_RCC_OscConfig+0x2a8>)
 80015aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ae:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b0:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <HAL_RCC_OscConfig+0x2a8>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d122      	bne.n	8001602 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015bc:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <HAL_RCC_OscConfig+0x2a8>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a07      	ldr	r2, [pc, #28]	; (80015e0 <HAL_RCC_OscConfig+0x2a8>)
 80015c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015c8:	f7ff fb70 	bl	8000cac <HAL_GetTick>
 80015cc:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ce:	e012      	b.n	80015f6 <HAL_RCC_OscConfig+0x2be>
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40023802 	.word	0x40023802
 80015d8:	42470000 	.word	0x42470000
 80015dc:	42470e80 	.word	0x42470e80
 80015e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015e4:	f7ff fb62 	bl	8000cac <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	6a3b      	ldr	r3, [r7, #32]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e0e0      	b.n	80017b8 <HAL_RCC_OscConfig+0x480>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f6:	4b72      	ldr	r3, [pc, #456]	; (80017c0 <HAL_RCC_OscConfig+0x488>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0f0      	beq.n	80015e4 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689a      	ldr	r2, [r3, #8]
 8001606:	4b6f      	ldr	r3, [pc, #444]	; (80017c4 <HAL_RCC_OscConfig+0x48c>)
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d015      	beq.n	8001640 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001614:	f7ff fb4a 	bl	8000cac <HAL_GetTick>
 8001618:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800161a:	e00a      	b.n	8001632 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800161c:	f7ff fb46 	bl	8000cac <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	6a3b      	ldr	r3, [r7, #32]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	f241 3288 	movw	r2, #5000	; 0x1388
 800162a:	4293      	cmp	r3, r2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e0c2      	b.n	80017b8 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001632:	4b65      	ldr	r3, [pc, #404]	; (80017c8 <HAL_RCC_OscConfig+0x490>)
 8001634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0ee      	beq.n	800161c <HAL_RCC_OscConfig+0x2e4>
 800163e:	e014      	b.n	800166a <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001640:	f7ff fb34 	bl	8000cac <HAL_GetTick>
 8001644:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001646:	e00a      	b.n	800165e <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001648:	f7ff fb30 	bl	8000cac <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	6a3b      	ldr	r3, [r7, #32]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	f241 3288 	movw	r2, #5000	; 0x1388
 8001656:	4293      	cmp	r3, r2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e0ac      	b.n	80017b8 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800165e:	4b5a      	ldr	r3, [pc, #360]	; (80017c8 <HAL_RCC_OscConfig+0x490>)
 8001660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1ee      	bne.n	8001648 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800166a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800166e:	2b01      	cmp	r3, #1
 8001670:	d105      	bne.n	800167e <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001672:	4b55      	ldr	r3, [pc, #340]	; (80017c8 <HAL_RCC_OscConfig+0x490>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	4a54      	ldr	r2, [pc, #336]	; (80017c8 <HAL_RCC_OscConfig+0x490>)
 8001678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800167c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 8097 	beq.w	80017b6 <HAL_RCC_OscConfig+0x47e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001688:	4b4f      	ldr	r3, [pc, #316]	; (80017c8 <HAL_RCC_OscConfig+0x490>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f003 030c 	and.w	r3, r3, #12
 8001690:	2b08      	cmp	r3, #8
 8001692:	d061      	beq.n	8001758 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	2b02      	cmp	r3, #2
 800169a:	d146      	bne.n	800172a <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169c:	4b4b      	ldr	r3, [pc, #300]	; (80017cc <HAL_RCC_OscConfig+0x494>)
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a2:	f7ff fb03 	bl	8000cac <HAL_GetTick>
 80016a6:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016aa:	f7ff faff 	bl	8000cac <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	6a3b      	ldr	r3, [r7, #32]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b64      	cmp	r3, #100	; 0x64
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e07d      	b.n	80017b8 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016bc:	4b42      	ldr	r3, [pc, #264]	; (80017c8 <HAL_RCC_OscConfig+0x490>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1f0      	bne.n	80016aa <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016c8:	4b3f      	ldr	r3, [pc, #252]	; (80017c8 <HAL_RCC_OscConfig+0x490>)
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	4b40      	ldr	r3, [pc, #256]	; (80017d0 <HAL_RCC_OscConfig+0x498>)
 80016ce:	4013      	ands	r3, r2
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	69d1      	ldr	r1, [r2, #28]
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6a12      	ldr	r2, [r2, #32]
 80016d8:	4311      	orrs	r1, r2
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016de:	0192      	lsls	r2, r2, #6
 80016e0:	4311      	orrs	r1, r2
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80016e6:	0612      	lsls	r2, r2, #24
 80016e8:	4311      	orrs	r1, r2
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80016ee:	0852      	lsrs	r2, r2, #1
 80016f0:	3a01      	subs	r2, #1
 80016f2:	0412      	lsls	r2, r2, #16
 80016f4:	430a      	orrs	r2, r1
 80016f6:	4934      	ldr	r1, [pc, #208]	; (80017c8 <HAL_RCC_OscConfig+0x490>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016fc:	4b33      	ldr	r3, [pc, #204]	; (80017cc <HAL_RCC_OscConfig+0x494>)
 80016fe:	2201      	movs	r2, #1
 8001700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001702:	f7ff fad3 	bl	8000cac <HAL_GetTick>
 8001706:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800170a:	f7ff facf 	bl	8000cac <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	6a3b      	ldr	r3, [r7, #32]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b64      	cmp	r3, #100	; 0x64
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e04d      	b.n	80017b8 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800171c:	4b2a      	ldr	r3, [pc, #168]	; (80017c8 <HAL_RCC_OscConfig+0x490>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0f0      	beq.n	800170a <HAL_RCC_OscConfig+0x3d2>
 8001728:	e045      	b.n	80017b6 <HAL_RCC_OscConfig+0x47e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800172a:	4b28      	ldr	r3, [pc, #160]	; (80017cc <HAL_RCC_OscConfig+0x494>)
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001730:	f7ff fabc 	bl	8000cac <HAL_GetTick>
 8001734:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001738:	f7ff fab8 	bl	8000cac <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	6a3b      	ldr	r3, [r7, #32]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b64      	cmp	r3, #100	; 0x64
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e036      	b.n	80017b8 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800174a:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <HAL_RCC_OscConfig+0x490>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f0      	bne.n	8001738 <HAL_RCC_OscConfig+0x400>
 8001756:	e02e      	b.n	80017b6 <HAL_RCC_OscConfig+0x47e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d101      	bne.n	8001764 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e029      	b.n	80017b8 <HAL_RCC_OscConfig+0x480>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8001764:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <HAL_RCC_OscConfig+0x490>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69db      	ldr	r3, [r3, #28]
 8001774:	429a      	cmp	r2, r3
 8001776:	d11c      	bne.n	80017b2 <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001782:	429a      	cmp	r2, r3
 8001784:	d115      	bne.n	80017b2 <HAL_RCC_OscConfig+0x47a>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	099b      	lsrs	r3, r3, #6
 800178a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001792:	429a      	cmp	r2, r3
 8001794:	d10d      	bne.n	80017b2 <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d106      	bne.n	80017b2 <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d001      	beq.n	80017b6 <HAL_RCC_OscConfig+0x47e>
        {
          return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e000      	b.n	80017b8 <HAL_RCC_OscConfig+0x480>
        }
      }
    }
  }
  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3728      	adds	r7, #40	; 0x28
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40007000 	.word	0x40007000
 80017c4:	40023870 	.word	0x40023870
 80017c8:	40023800 	.word	0x40023800
 80017cc:	42470060 	.word	0x42470060
 80017d0:	f0bc8000 	.word	0xf0bc8000

080017d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0d2      	b.n	800198e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017e8:	4b6b      	ldr	r3, [pc, #428]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 030f 	and.w	r3, r3, #15
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d90c      	bls.n	8001810 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f6:	4b68      	ldr	r3, [pc, #416]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fe:	4b66      	ldr	r3, [pc, #408]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d001      	beq.n	8001810 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e0be      	b.n	800198e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d020      	beq.n	800185e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b00      	cmp	r3, #0
 8001826:	d005      	beq.n	8001834 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001828:	4b5c      	ldr	r3, [pc, #368]	; (800199c <HAL_RCC_ClockConfig+0x1c8>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	4a5b      	ldr	r2, [pc, #364]	; (800199c <HAL_RCC_ClockConfig+0x1c8>)
 800182e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001832:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0308 	and.w	r3, r3, #8
 800183c:	2b00      	cmp	r3, #0
 800183e:	d005      	beq.n	800184c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8001840:	4b56      	ldr	r3, [pc, #344]	; (800199c <HAL_RCC_ClockConfig+0x1c8>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	4a55      	ldr	r2, [pc, #340]	; (800199c <HAL_RCC_ClockConfig+0x1c8>)
 8001846:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800184a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800184c:	4b53      	ldr	r3, [pc, #332]	; (800199c <HAL_RCC_ClockConfig+0x1c8>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	4950      	ldr	r1, [pc, #320]	; (800199c <HAL_RCC_ClockConfig+0x1c8>)
 800185a:	4313      	orrs	r3, r2
 800185c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b00      	cmp	r3, #0
 8001868:	d040      	beq.n	80018ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d107      	bne.n	8001882 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001872:	4b4a      	ldr	r3, [pc, #296]	; (800199c <HAL_RCC_ClockConfig+0x1c8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d115      	bne.n	80018aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e085      	b.n	800198e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b02      	cmp	r3, #2
 8001888:	d107      	bne.n	800189a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800188a:	4b44      	ldr	r3, [pc, #272]	; (800199c <HAL_RCC_ClockConfig+0x1c8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d109      	bne.n	80018aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e079      	b.n	800198e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189a:	4b40      	ldr	r3, [pc, #256]	; (800199c <HAL_RCC_ClockConfig+0x1c8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e071      	b.n	800198e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018aa:	4b3c      	ldr	r3, [pc, #240]	; (800199c <HAL_RCC_ClockConfig+0x1c8>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f023 0203 	bic.w	r2, r3, #3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	4939      	ldr	r1, [pc, #228]	; (800199c <HAL_RCC_ClockConfig+0x1c8>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018bc:	f7ff f9f6 	bl	8000cac <HAL_GetTick>
 80018c0:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c2:	e00a      	b.n	80018da <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c4:	f7ff f9f2 	bl	8000cac <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e059      	b.n	800198e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018da:	4b30      	ldr	r3, [pc, #192]	; (800199c <HAL_RCC_ClockConfig+0x1c8>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 020c 	and.w	r2, r3, #12
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d1eb      	bne.n	80018c4 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018ec:	4b2a      	ldr	r3, [pc, #168]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 030f 	and.w	r3, r3, #15
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d20c      	bcs.n	8001914 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fa:	4b27      	ldr	r3, [pc, #156]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001902:	4b25      	ldr	r3, [pc, #148]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	429a      	cmp	r2, r3
 800190e:	d001      	beq.n	8001914 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e03c      	b.n	800198e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	2b00      	cmp	r3, #0
 800191e:	d008      	beq.n	8001932 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001920:	4b1e      	ldr	r3, [pc, #120]	; (800199c <HAL_RCC_ClockConfig+0x1c8>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	491b      	ldr	r1, [pc, #108]	; (800199c <HAL_RCC_ClockConfig+0x1c8>)
 800192e:	4313      	orrs	r3, r2
 8001930:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0308 	and.w	r3, r3, #8
 800193a:	2b00      	cmp	r3, #0
 800193c:	d009      	beq.n	8001952 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800193e:	4b17      	ldr	r3, [pc, #92]	; (800199c <HAL_RCC_ClockConfig+0x1c8>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	4913      	ldr	r1, [pc, #76]	; (800199c <HAL_RCC_ClockConfig+0x1c8>)
 800194e:	4313      	orrs	r3, r2
 8001950:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001952:	f000 f82b 	bl	80019ac <HAL_RCC_GetSysClockFreq>
 8001956:	4601      	mov	r1, r0
 8001958:	4b10      	ldr	r3, [pc, #64]	; (800199c <HAL_RCC_ClockConfig+0x1c8>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001960:	22f0      	movs	r2, #240	; 0xf0
 8001962:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	fa92 f2a2 	rbit	r2, r2
 800196a:	60fa      	str	r2, [r7, #12]
  return result;
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	fab2 f282 	clz	r2, r2
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	40d3      	lsrs	r3, r2
 8001976:	4a0a      	ldr	r2, [pc, #40]	; (80019a0 <HAL_RCC_ClockConfig+0x1cc>)
 8001978:	5cd3      	ldrb	r3, [r2, r3]
 800197a:	fa21 f303 	lsr.w	r3, r1, r3
 800197e:	4a09      	ldr	r2, [pc, #36]	; (80019a4 <HAL_RCC_ClockConfig+0x1d0>)
 8001980:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <HAL_RCC_ClockConfig+0x1d4>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff f94e 	bl	8000c28 <HAL_InitTick>

  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40023c00 	.word	0x40023c00
 800199c:	40023800 	.word	0x40023800
 80019a0:	080027f4 	.word	0x080027f4
 80019a4:	20000068 	.word	0x20000068
 80019a8:	2000006c 	.word	0x2000006c

080019ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019b0:	b090      	sub	sp, #64	; 0x40
 80019b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	637b      	str	r3, [r7, #52]	; 0x34
 80019b8:	2300      	movs	r3, #0
 80019ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019bc:	2300      	movs	r3, #0
 80019be:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019c4:	4b59      	ldr	r3, [pc, #356]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x180>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 030c 	and.w	r3, r3, #12
 80019cc:	2b08      	cmp	r3, #8
 80019ce:	d00d      	beq.n	80019ec <HAL_RCC_GetSysClockFreq+0x40>
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	f200 80a2 	bhi.w	8001b1a <HAL_RCC_GetSysClockFreq+0x16e>
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d002      	beq.n	80019e0 <HAL_RCC_GetSysClockFreq+0x34>
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d003      	beq.n	80019e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80019de:	e09c      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019e0:	4b53      	ldr	r3, [pc, #332]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x184>)
 80019e2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80019e4:	e09c      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019e6:	4b53      	ldr	r3, [pc, #332]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x188>)
 80019e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019ea:	e099      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019ec:	4b4f      	ldr	r3, [pc, #316]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x180>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019f4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019f6:	4b4d      	ldr	r3, [pc, #308]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x180>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d027      	beq.n	8001a52 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a02:	4b4a      	ldr	r3, [pc, #296]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x180>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	099b      	lsrs	r3, r3, #6
 8001a08:	2200      	movs	r2, #0
 8001a0a:	623b      	str	r3, [r7, #32]
 8001a0c:	627a      	str	r2, [r7, #36]	; 0x24
 8001a0e:	6a3b      	ldr	r3, [r7, #32]
 8001a10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a14:	2100      	movs	r1, #0
 8001a16:	4b47      	ldr	r3, [pc, #284]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a18:	fb03 f201 	mul.w	r2, r3, r1
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	fb00 f303 	mul.w	r3, r0, r3
 8001a22:	4413      	add	r3, r2
 8001a24:	4a43      	ldr	r2, [pc, #268]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a26:	fba0 2102 	umull	r2, r1, r0, r2
 8001a2a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001a2c:	62ba      	str	r2, [r7, #40]	; 0x28
 8001a2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a30:	4413      	add	r3, r2
 8001a32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a36:	2200      	movs	r2, #0
 8001a38:	61bb      	str	r3, [r7, #24]
 8001a3a:	61fa      	str	r2, [r7, #28]
 8001a3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a40:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a44:	f7fe fbbe 	bl	80001c4 <__aeabi_uldivmod>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a50:	e055      	b.n	8001afe <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a52:	4b36      	ldr	r3, [pc, #216]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x180>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	099b      	lsrs	r3, r3, #6
 8001a58:	2200      	movs	r2, #0
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	617a      	str	r2, [r7, #20]
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001a64:	f04f 0b00 	mov.w	fp, #0
 8001a68:	4652      	mov	r2, sl
 8001a6a:	465b      	mov	r3, fp
 8001a6c:	f04f 0000 	mov.w	r0, #0
 8001a70:	f04f 0100 	mov.w	r1, #0
 8001a74:	0159      	lsls	r1, r3, #5
 8001a76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a7a:	0150      	lsls	r0, r2, #5
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	ebb2 080a 	subs.w	r8, r2, sl
 8001a84:	eb63 090b 	sbc.w	r9, r3, fp
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a94:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a98:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a9c:	ebb2 0408 	subs.w	r4, r2, r8
 8001aa0:	eb63 0509 	sbc.w	r5, r3, r9
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	f04f 0300 	mov.w	r3, #0
 8001aac:	00eb      	lsls	r3, r5, #3
 8001aae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ab2:	00e2      	lsls	r2, r4, #3
 8001ab4:	4614      	mov	r4, r2
 8001ab6:	461d      	mov	r5, r3
 8001ab8:	eb14 030a 	adds.w	r3, r4, sl
 8001abc:	603b      	str	r3, [r7, #0]
 8001abe:	eb45 030b 	adc.w	r3, r5, fp
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ad0:	4629      	mov	r1, r5
 8001ad2:	028b      	lsls	r3, r1, #10
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	4629      	mov	r1, r5
 8001ad8:	4604      	mov	r4, r0
 8001ada:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001ade:	4601      	mov	r1, r0
 8001ae0:	028a      	lsls	r2, r1, #10
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae8:	2200      	movs	r2, #0
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	60fa      	str	r2, [r7, #12]
 8001aee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001af2:	f7fe fb67 	bl	80001c4 <__aeabi_uldivmod>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4613      	mov	r3, r2
 8001afc:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001afe:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x180>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	0c1b      	lsrs	r3, r3, #16
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	3301      	adds	r3, #1
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001b0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b16:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b18:	e002      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b1a:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b1c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b1e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3740      	adds	r7, #64	; 0x40
 8001b26:	46bd      	mov	sp, r7
 8001b28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	00f42400 	.word	0x00f42400
 8001b34:	017d7840 	.word	0x017d7840

08001b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b3c:	4b02      	ldr	r3, [pc, #8]	; (8001b48 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	20000068 	.word	0x20000068

08001b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001b52:	f7ff fff1 	bl	8001b38 <HAL_RCC_GetHCLKFreq>
 8001b56:	4601      	mov	r1, r0
 8001b58:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001b60:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8001b64:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	fa92 f2a2 	rbit	r2, r2
 8001b6c:	603a      	str	r2, [r7, #0]
  return result;
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	fab2 f282 	clz	r2, r2
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	40d3      	lsrs	r3, r2
 8001b78:	4a04      	ldr	r2, [pc, #16]	; (8001b8c <HAL_RCC_GetPCLK1Freq+0x40>)
 8001b7a:	5cd3      	ldrb	r3, [r2, r3]
 8001b7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	08002804 	.word	0x08002804

08001b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8001b96:	f7ff ffcf 	bl	8001b38 <HAL_RCC_GetHCLKFreq>
 8001b9a:	4601      	mov	r1, r0
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001ba4:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001ba8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	fa92 f2a2 	rbit	r2, r2
 8001bb0:	603a      	str	r2, [r7, #0]
  return result;
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	fab2 f282 	clz	r2, r2
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	40d3      	lsrs	r3, r2
 8001bbc:	4a04      	ldr	r2, [pc, #16]	; (8001bd0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001bbe:	5cd3      	ldrb	r3, [r2, r3]
 8001bc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	08002804 	.word	0x08002804

08001bd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e03f      	b.n	8001c66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d106      	bne.n	8001c00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7fe ff40 	bl	8000a80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2224      	movs	r2, #36	; 0x24
 8001c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 fca3 	bl	8002564 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	691a      	ldr	r2, [r3, #16]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	695a      	ldr	r2, [r3, #20]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68da      	ldr	r2, [r3, #12]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2220      	movs	r2, #32
 8001c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2220      	movs	r2, #32
 8001c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b08a      	sub	sp, #40	; 0x28
 8001c72:	af02      	add	r7, sp, #8
 8001c74:	60f8      	str	r0, [r7, #12]
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	603b      	str	r3, [r7, #0]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b20      	cmp	r3, #32
 8001c8c:	d17c      	bne.n	8001d88 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d002      	beq.n	8001c9a <HAL_UART_Transmit+0x2c>
 8001c94:	88fb      	ldrh	r3, [r7, #6]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e075      	b.n	8001d8a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d101      	bne.n	8001cac <HAL_UART_Transmit+0x3e>
 8001ca8:	2302      	movs	r3, #2
 8001caa:	e06e      	b.n	8001d8a <HAL_UART_Transmit+0x11c>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2221      	movs	r2, #33	; 0x21
 8001cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001cc2:	f7fe fff3 	bl	8000cac <HAL_GetTick>
 8001cc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	88fa      	ldrh	r2, [r7, #6]
 8001ccc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	88fa      	ldrh	r2, [r7, #6]
 8001cd2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cdc:	d108      	bne.n	8001cf0 <HAL_UART_Transmit+0x82>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d104      	bne.n	8001cf0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	61bb      	str	r3, [r7, #24]
 8001cee:	e003      	b.n	8001cf8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001d00:	e02a      	b.n	8001d58 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2180      	movs	r1, #128	; 0x80
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f000 fa56 	bl	80021be <UART_WaitOnFlagUntilTimeout>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e036      	b.n	8001d8a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10b      	bne.n	8001d3a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	3302      	adds	r3, #2
 8001d36:	61bb      	str	r3, [r7, #24]
 8001d38:	e007      	b.n	8001d4a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	781a      	ldrb	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	3301      	adds	r3, #1
 8001d48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	3b01      	subs	r3, #1
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1cf      	bne.n	8001d02 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2140      	movs	r1, #64	; 0x40
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f000 fa26 	bl	80021be <UART_WaitOnFlagUntilTimeout>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e006      	b.n	8001d8a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2220      	movs	r2, #32
 8001d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001d84:	2300      	movs	r3, #0
 8001d86:	e000      	b.n	8001d8a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001d88:	2302      	movs	r3, #2
  }
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3720      	adds	r7, #32
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b086      	sub	sp, #24
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	60f8      	str	r0, [r7, #12]
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b20      	cmp	r3, #32
 8001daa:	d13c      	bne.n	8001e26 <HAL_UARTEx_ReceiveToIdle_IT+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d002      	beq.n	8001db8 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8001db2:	88fb      	ldrh	r3, [r7, #6]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e035      	b.n	8001e28 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
    }

    __HAL_LOCK(huart);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d101      	bne.n	8001dca <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	e02e      	b.n	8001e28 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8001dd8:	88fb      	ldrh	r3, [r7, #6]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	68b9      	ldr	r1, [r7, #8]
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f000 fa37 	bl	8002252 <UART_Start_Receive_IT>
 8001de4:	4603      	mov	r3, r0
 8001de6:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8001de8:	7dfb      	ldrb	r3, [r7, #23]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d119      	bne.n	8001e22 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d113      	bne.n	8001e1e <HAL_UARTEx_ReceiveToIdle_IT+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0210 	orr.w	r2, r2, #16
 8001e1a:	60da      	str	r2, [r3, #12]
 8001e1c:	e001      	b.n	8001e22 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8001e22:	7dfb      	ldrb	r3, [r7, #23]
 8001e24:	e000      	b.n	8001e28 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  }
  else
  {
    return HAL_BUSY;
 8001e26:	2302      	movs	r3, #2
  }
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08a      	sub	sp, #40	; 0x28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10d      	bne.n	8001e82 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	f003 0320 	and.w	r3, r3, #32
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d008      	beq.n	8001e82 <HAL_UART_IRQHandler+0x52>
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	f003 0320 	and.w	r3, r3, #32
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 fac9 	bl	8002412 <UART_Receive_IT>
      return;
 8001e80:	e17c      	b.n	800217c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 80b1 	beq.w	8001fec <HAL_UART_IRQHandler+0x1bc>
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d105      	bne.n	8001ea0 <HAL_UART_IRQHandler+0x70>
 8001e94:	6a3b      	ldr	r3, [r7, #32]
 8001e96:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 80a6 	beq.w	8001fec <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00a      	beq.n	8001ec0 <HAL_UART_IRQHandler+0x90>
 8001eaa:	6a3b      	ldr	r3, [r7, #32]
 8001eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d005      	beq.n	8001ec0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb8:	f043 0201 	orr.w	r2, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00a      	beq.n	8001ee0 <HAL_UART_IRQHandler+0xb0>
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d005      	beq.n	8001ee0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed8:	f043 0202 	orr.w	r2, r3, #2
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00a      	beq.n	8001f00 <HAL_UART_IRQHandler+0xd0>
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d005      	beq.n	8001f00 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	f043 0204 	orr.w	r2, r3, #4
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00f      	beq.n	8001f2a <HAL_UART_IRQHandler+0xfa>
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
 8001f0c:	f003 0320 	and.w	r3, r3, #32
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d104      	bne.n	8001f1e <HAL_UART_IRQHandler+0xee>
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d005      	beq.n	8001f2a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f043 0208 	orr.w	r2, r3, #8
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 811f 	beq.w	8002172 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	f003 0320 	and.w	r3, r3, #32
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d007      	beq.n	8001f4e <HAL_UART_IRQHandler+0x11e>
 8001f3e:	6a3b      	ldr	r3, [r7, #32]
 8001f40:	f003 0320 	and.w	r3, r3, #32
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d002      	beq.n	8001f4e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 fa62 	bl	8002412 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f58:	2b40      	cmp	r3, #64	; 0x40
 8001f5a:	bf0c      	ite	eq
 8001f5c:	2301      	moveq	r3, #1
 8001f5e:	2300      	movne	r3, #0
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f68:	f003 0308 	and.w	r3, r3, #8
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d102      	bne.n	8001f76 <HAL_UART_IRQHandler+0x146>
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d031      	beq.n	8001fda <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f9a4 	bl	80022c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f86:	2b40      	cmp	r3, #64	; 0x40
 8001f88:	d123      	bne.n	8001fd2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	695a      	ldr	r2, [r3, #20]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f98:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d013      	beq.n	8001fca <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa6:	4a77      	ldr	r2, [pc, #476]	; (8002184 <HAL_UART_IRQHandler+0x354>)
 8001fa8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff f803 	bl	8000fba <HAL_DMA_Abort_IT>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d016      	beq.n	8001fe8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fc4:	4610      	mov	r0, r2
 8001fc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fc8:	e00e      	b.n	8001fe8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f8ee 	bl	80021ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fd0:	e00a      	b.n	8001fe8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f8ea 	bl	80021ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fd8:	e006      	b.n	8001fe8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f8e6 	bl	80021ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001fe6:	e0c4      	b.n	8002172 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fe8:	bf00      	nop
    return;
 8001fea:	e0c2      	b.n	8002172 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	f040 80a2 	bne.w	800213a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	f003 0310 	and.w	r3, r3, #16
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 809c 	beq.w	800213a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002002:	6a3b      	ldr	r3, [r7, #32]
 8002004:	f003 0310 	and.w	r3, r3, #16
 8002008:	2b00      	cmp	r3, #0
 800200a:	f000 8096 	beq.w	800213a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800202e:	2b40      	cmp	r3, #64	; 0x40
 8002030:	d14f      	bne.n	80020d2 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800203c:	8a3b      	ldrh	r3, [r7, #16]
 800203e:	2b00      	cmp	r3, #0
 8002040:	f000 8099 	beq.w	8002176 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002048:	8a3a      	ldrh	r2, [r7, #16]
 800204a:	429a      	cmp	r2, r3
 800204c:	f080 8093 	bcs.w	8002176 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	8a3a      	ldrh	r2, [r7, #16]
 8002054:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205a:	69db      	ldr	r3, [r3, #28]
 800205c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002060:	d02b      	beq.n	80020ba <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002070:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	695a      	ldr	r2, [r3, #20]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0201 	bic.w	r2, r2, #1
 8002080:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	695a      	ldr	r2, [r3, #20]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002090:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2220      	movs	r2, #32
 8002096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0210 	bic.w	r2, r2, #16
 80020ae:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7fe ff10 	bl	8000eda <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	4619      	mov	r1, r3
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7fe fbfe 	bl	80008cc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80020d0:	e051      	b.n	8002176 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020da:	b29b      	uxth	r3, r3
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d047      	beq.n	800217a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80020ea:	8a7b      	ldrh	r3, [r7, #18]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d044      	beq.n	800217a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80020fe:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	695a      	ldr	r2, [r3, #20]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0201 	bic.w	r2, r2, #1
 800210e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2220      	movs	r2, #32
 8002114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68da      	ldr	r2, [r3, #12]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0210 	bic.w	r2, r2, #16
 800212c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800212e:	8a7b      	ldrh	r3, [r7, #18]
 8002130:	4619      	mov	r1, r3
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7fe fbca 	bl	80008cc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002138:	e01f      	b.n	800217a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002140:	2b00      	cmp	r3, #0
 8002142:	d008      	beq.n	8002156 <HAL_UART_IRQHandler+0x326>
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f8f8 	bl	8002344 <UART_Transmit_IT>
    return;
 8002154:	e012      	b.n	800217c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00d      	beq.n	800217c <HAL_UART_IRQHandler+0x34c>
 8002160:	6a3b      	ldr	r3, [r7, #32]
 8002162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002166:	2b00      	cmp	r3, #0
 8002168:	d008      	beq.n	800217c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f939 	bl	80023e2 <UART_EndTransmit_IT>
    return;
 8002170:	e004      	b.n	800217c <HAL_UART_IRQHandler+0x34c>
    return;
 8002172:	bf00      	nop
 8002174:	e002      	b.n	800217c <HAL_UART_IRQHandler+0x34c>
      return;
 8002176:	bf00      	nop
 8002178:	e000      	b.n	800217c <HAL_UART_IRQHandler+0x34c>
      return;
 800217a:	bf00      	nop
  }
}
 800217c:	3728      	adds	r7, #40	; 0x28
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	0800231d 	.word	0x0800231d

08002188 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr

0800219a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr

080021ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr

080021be <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b084      	sub	sp, #16
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	603b      	str	r3, [r7, #0]
 80021ca:	4613      	mov	r3, r2
 80021cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021ce:	e02c      	b.n	800222a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d6:	d028      	beq.n	800222a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d007      	beq.n	80021ee <UART_WaitOnFlagUntilTimeout+0x30>
 80021de:	f7fe fd65 	bl	8000cac <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d21d      	bcs.n	800222a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68da      	ldr	r2, [r3, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80021fc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695a      	ldr	r2, [r3, #20]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0201 	bic.w	r2, r2, #1
 800220c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2220      	movs	r2, #32
 8002212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2220      	movs	r2, #32
 800221a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e00f      	b.n	800224a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	4013      	ands	r3, r2
 8002234:	68ba      	ldr	r2, [r7, #8]
 8002236:	429a      	cmp	r2, r3
 8002238:	bf0c      	ite	eq
 800223a:	2301      	moveq	r3, #1
 800223c:	2300      	movne	r3, #0
 800223e:	b2db      	uxtb	r3, r3
 8002240:	461a      	mov	r2, r3
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	429a      	cmp	r2, r3
 8002246:	d0c3      	beq.n	80021d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002252:	b480      	push	{r7}
 8002254:	b085      	sub	sp, #20
 8002256:	af00      	add	r7, sp, #0
 8002258:	60f8      	str	r0, [r7, #12]
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	4613      	mov	r3, r2
 800225e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	88fa      	ldrh	r2, [r7, #6]
 800226a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	88fa      	ldrh	r2, [r7, #6]
 8002270:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2222      	movs	r2, #34	; 0x22
 800227c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002296:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	695a      	ldr	r2, [r3, #20]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0201 	orr.w	r2, r2, #1
 80022a6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0220 	orr.w	r2, r2, #32
 80022b6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr

080022c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80022da:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	695a      	ldr	r2, [r3, #20]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0201 	bic.w	r2, r2, #1
 80022ea:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d107      	bne.n	8002304 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0210 	bic.w	r2, r2, #16
 8002302:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2220      	movs	r2, #32
 8002308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr

0800231c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002328:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f7ff ff38 	bl	80021ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800233c:	bf00      	nop
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b21      	cmp	r3, #33	; 0x21
 8002356:	d13e      	bne.n	80023d6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002360:	d114      	bne.n	800238c <UART_Transmit_IT+0x48>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d110      	bne.n	800238c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	461a      	mov	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800237e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	1c9a      	adds	r2, r3, #2
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	621a      	str	r2, [r3, #32]
 800238a:	e008      	b.n	800239e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	1c59      	adds	r1, r3, #1
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6211      	str	r1, [r2, #32]
 8002396:	781a      	ldrb	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	4619      	mov	r1, r3
 80023ac:	84d1      	strh	r1, [r2, #38]	; 0x26
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10f      	bne.n	80023d2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80023d2:	2300      	movs	r3, #0
 80023d4:	e000      	b.n	80023d8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80023d6:	2302      	movs	r3, #2
  }
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr

080023e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68da      	ldr	r2, [r3, #12]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2220      	movs	r2, #32
 80023fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7ff fec0 	bl	8002188 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b086      	sub	sp, #24
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b22      	cmp	r3, #34	; 0x22
 8002424:	f040 8099 	bne.w	800255a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002430:	d117      	bne.n	8002462 <UART_Receive_IT+0x50>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d113      	bne.n	8002462 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002442:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	b29b      	uxth	r3, r3
 800244c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002450:	b29a      	uxth	r2, r3
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245a:	1c9a      	adds	r2, r3, #2
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	629a      	str	r2, [r3, #40]	; 0x28
 8002460:	e026      	b.n	80024b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002466:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002468:	2300      	movs	r3, #0
 800246a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002474:	d007      	beq.n	8002486 <UART_Receive_IT+0x74>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10a      	bne.n	8002494 <UART_Receive_IT+0x82>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d106      	bne.n	8002494 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	b2da      	uxtb	r2, r3
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	701a      	strb	r2, [r3, #0]
 8002492:	e008      	b.n	80024a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024aa:	1c5a      	adds	r2, r3, #1
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	3b01      	subs	r3, #1
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	4619      	mov	r1, r3
 80024be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d148      	bne.n	8002556 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0220 	bic.w	r2, r2, #32
 80024d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695a      	ldr	r2, [r3, #20]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 0201 	bic.w	r2, r2, #1
 80024f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2220      	movs	r2, #32
 80024f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002500:	2b01      	cmp	r3, #1
 8002502:	d123      	bne.n	800254c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68da      	ldr	r2, [r3, #12]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0210 	bic.w	r2, r2, #16
 8002518:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0310 	and.w	r3, r3, #16
 8002524:	2b10      	cmp	r3, #16
 8002526:	d10a      	bne.n	800253e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002528:	2300      	movs	r3, #0
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002542:	4619      	mov	r1, r3
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7fe f9c1 	bl	80008cc <HAL_UARTEx_RxEventCallback>
 800254a:	e002      	b.n	8002552 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7ff fe24 	bl	800219a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002552:	2300      	movs	r3, #0
 8002554:	e002      	b.n	800255c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002556:	2300      	movs	r3, #0
 8002558:	e000      	b.n	800255c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800255a:	2302      	movs	r3, #2
  }
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68da      	ldr	r2, [r3, #12]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	431a      	orrs	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	4313      	orrs	r3, r2
 8002598:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80025a4:	f023 030c 	bic.w	r3, r3, #12
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6812      	ldr	r2, [r2, #0]
 80025ac:	68b9      	ldr	r1, [r7, #8]
 80025ae:	430b      	orrs	r3, r1
 80025b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	699a      	ldr	r2, [r3, #24]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a57      	ldr	r2, [pc, #348]	; (800272c <UART_SetConfig+0x1c8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d004      	beq.n	80025dc <UART_SetConfig+0x78>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a56      	ldr	r2, [pc, #344]	; (8002730 <UART_SetConfig+0x1cc>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d103      	bne.n	80025e4 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025dc:	f7ff fad8 	bl	8001b90 <HAL_RCC_GetPCLK2Freq>
 80025e0:	60f8      	str	r0, [r7, #12]
 80025e2:	e002      	b.n	80025ea <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80025e4:	f7ff fab2 	bl	8001b4c <HAL_RCC_GetPCLK1Freq>
 80025e8:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025f2:	d14c      	bne.n	800268e <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	4613      	mov	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	009a      	lsls	r2, r3, #2
 80025fe:	441a      	add	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	fbb2 f3f3 	udiv	r3, r2, r3
 800260a:	4a4a      	ldr	r2, [pc, #296]	; (8002734 <UART_SetConfig+0x1d0>)
 800260c:	fba2 2303 	umull	r2, r3, r2, r3
 8002610:	095b      	lsrs	r3, r3, #5
 8002612:	0119      	lsls	r1, r3, #4
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	009a      	lsls	r2, r3, #2
 800261e:	441a      	add	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	fbb2 f2f3 	udiv	r2, r2, r3
 800262a:	4b42      	ldr	r3, [pc, #264]	; (8002734 <UART_SetConfig+0x1d0>)
 800262c:	fba3 0302 	umull	r0, r3, r3, r2
 8002630:	095b      	lsrs	r3, r3, #5
 8002632:	2064      	movs	r0, #100	; 0x64
 8002634:	fb00 f303 	mul.w	r3, r0, r3
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	3332      	adds	r3, #50	; 0x32
 800263e:	4a3d      	ldr	r2, [pc, #244]	; (8002734 <UART_SetConfig+0x1d0>)
 8002640:	fba2 2303 	umull	r2, r3, r2, r3
 8002644:	095b      	lsrs	r3, r3, #5
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800264c:	4419      	add	r1, r3
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	4613      	mov	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	009a      	lsls	r2, r3, #2
 8002658:	441a      	add	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	fbb2 f2f3 	udiv	r2, r2, r3
 8002664:	4b33      	ldr	r3, [pc, #204]	; (8002734 <UART_SetConfig+0x1d0>)
 8002666:	fba3 0302 	umull	r0, r3, r3, r2
 800266a:	095b      	lsrs	r3, r3, #5
 800266c:	2064      	movs	r0, #100	; 0x64
 800266e:	fb00 f303 	mul.w	r3, r0, r3
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	3332      	adds	r3, #50	; 0x32
 8002678:	4a2e      	ldr	r2, [pc, #184]	; (8002734 <UART_SetConfig+0x1d0>)
 800267a:	fba2 2303 	umull	r2, r3, r2, r3
 800267e:	095b      	lsrs	r3, r3, #5
 8002680:	f003 0207 	and.w	r2, r3, #7
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	440a      	add	r2, r1
 800268a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800268c:	e04a      	b.n	8002724 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	4613      	mov	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	009a      	lsls	r2, r3, #2
 8002698:	441a      	add	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a4:	4a23      	ldr	r2, [pc, #140]	; (8002734 <UART_SetConfig+0x1d0>)
 80026a6:	fba2 2303 	umull	r2, r3, r2, r3
 80026aa:	095b      	lsrs	r3, r3, #5
 80026ac:	0119      	lsls	r1, r3, #4
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	4613      	mov	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	009a      	lsls	r2, r3, #2
 80026b8:	441a      	add	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80026c4:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <UART_SetConfig+0x1d0>)
 80026c6:	fba3 0302 	umull	r0, r3, r3, r2
 80026ca:	095b      	lsrs	r3, r3, #5
 80026cc:	2064      	movs	r0, #100	; 0x64
 80026ce:	fb00 f303 	mul.w	r3, r0, r3
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	3332      	adds	r3, #50	; 0x32
 80026d8:	4a16      	ldr	r2, [pc, #88]	; (8002734 <UART_SetConfig+0x1d0>)
 80026da:	fba2 2303 	umull	r2, r3, r2, r3
 80026de:	095b      	lsrs	r3, r3, #5
 80026e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026e4:	4419      	add	r1, r3
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	4613      	mov	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	009a      	lsls	r2, r3, #2
 80026f0:	441a      	add	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80026fc:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <UART_SetConfig+0x1d0>)
 80026fe:	fba3 0302 	umull	r0, r3, r3, r2
 8002702:	095b      	lsrs	r3, r3, #5
 8002704:	2064      	movs	r0, #100	; 0x64
 8002706:	fb00 f303 	mul.w	r3, r0, r3
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	011b      	lsls	r3, r3, #4
 800270e:	3332      	adds	r3, #50	; 0x32
 8002710:	4a08      	ldr	r2, [pc, #32]	; (8002734 <UART_SetConfig+0x1d0>)
 8002712:	fba2 2303 	umull	r2, r3, r2, r3
 8002716:	095b      	lsrs	r3, r3, #5
 8002718:	f003 020f 	and.w	r2, r3, #15
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	440a      	add	r2, r1
 8002722:	609a      	str	r2, [r3, #8]
}
 8002724:	bf00      	nop
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40011000 	.word	0x40011000
 8002730:	40011400 	.word	0x40011400
 8002734:	51eb851f 	.word	0x51eb851f

08002738 <__libc_init_array>:
 8002738:	b570      	push	{r4, r5, r6, lr}
 800273a:	2600      	movs	r6, #0
 800273c:	4d0c      	ldr	r5, [pc, #48]	; (8002770 <__libc_init_array+0x38>)
 800273e:	4c0d      	ldr	r4, [pc, #52]	; (8002774 <__libc_init_array+0x3c>)
 8002740:	1b64      	subs	r4, r4, r5
 8002742:	10a4      	asrs	r4, r4, #2
 8002744:	42a6      	cmp	r6, r4
 8002746:	d109      	bne.n	800275c <__libc_init_array+0x24>
 8002748:	f000 f822 	bl	8002790 <_init>
 800274c:	2600      	movs	r6, #0
 800274e:	4d0a      	ldr	r5, [pc, #40]	; (8002778 <__libc_init_array+0x40>)
 8002750:	4c0a      	ldr	r4, [pc, #40]	; (800277c <__libc_init_array+0x44>)
 8002752:	1b64      	subs	r4, r4, r5
 8002754:	10a4      	asrs	r4, r4, #2
 8002756:	42a6      	cmp	r6, r4
 8002758:	d105      	bne.n	8002766 <__libc_init_array+0x2e>
 800275a:	bd70      	pop	{r4, r5, r6, pc}
 800275c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002760:	4798      	blx	r3
 8002762:	3601      	adds	r6, #1
 8002764:	e7ee      	b.n	8002744 <__libc_init_array+0xc>
 8002766:	f855 3b04 	ldr.w	r3, [r5], #4
 800276a:	4798      	blx	r3
 800276c:	3601      	adds	r6, #1
 800276e:	e7f2      	b.n	8002756 <__libc_init_array+0x1e>
 8002770:	08002814 	.word	0x08002814
 8002774:	08002814 	.word	0x08002814
 8002778:	08002814 	.word	0x08002814
 800277c:	08002818 	.word	0x08002818

08002780 <memset>:
 8002780:	4603      	mov	r3, r0
 8002782:	4402      	add	r2, r0
 8002784:	4293      	cmp	r3, r2
 8002786:	d100      	bne.n	800278a <memset+0xa>
 8002788:	4770      	bx	lr
 800278a:	f803 1b01 	strb.w	r1, [r3], #1
 800278e:	e7f9      	b.n	8002784 <memset+0x4>

08002790 <_init>:
 8002790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002792:	bf00      	nop
 8002794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002796:	bc08      	pop	{r3}
 8002798:	469e      	mov	lr, r3
 800279a:	4770      	bx	lr

0800279c <_fini>:
 800279c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800279e:	bf00      	nop
 80027a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027a2:	bc08      	pop	{r3}
 80027a4:	469e      	mov	lr, r3
 80027a6:	4770      	bx	lr
